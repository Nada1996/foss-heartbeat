{"url": "https://api.github.com/repos/mozilla/node-firefox/issues/7", "repository_url": "https://api.github.com/repos/mozilla/node-firefox", "labels_url": "https://api.github.com/repos/mozilla/node-firefox/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/mozilla/node-firefox/issues/7/comments", "events_url": "https://api.github.com/repos/mozilla/node-firefox/issues/7/events", "html_url": "https://github.com/mozilla/node-firefox/issues/7", "id": 54447687, "number": 7, "title": "Module guidelines", "user": {"login": "sole", "id": 5609, "avatar_url": "https://avatars2.githubusercontent.com/u/5609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sole", "html_url": "https://github.com/sole", "followers_url": "https://api.github.com/users/sole/followers", "following_url": "https://api.github.com/users/sole/following{/other_user}", "gists_url": "https://api.github.com/users/sole/gists{/gist_id}", "starred_url": "https://api.github.com/users/sole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sole/subscriptions", "organizations_url": "https://api.github.com/users/sole/orgs", "repos_url": "https://api.github.com/users/sole/repos", "events_url": "https://api.github.com/users/sole/events{/privacy}", "received_events_url": "https://api.github.com/users/sole/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-01-15T13:14:24Z", "updated_at": "2015-01-16T11:55:37Z", "closed_at": "2015-01-16T11:55:37Z", "author_association": "MEMBER", "body_html": "<p>I'm thinking of adding these guidelines to the README as a new section so we are all on the same page. It's a way of formalising/dumping the knowledge we've acquired while tidying up the first two modules. Did I forget anything? <a href=\"https://github.com/tofumatt\" class=\"user-mention\">@tofumatt</a> <a href=\"https://github.com/brittanystoroz\" class=\"user-mention\">@brittanystoroz</a></p>\n<ol>\n<li>\n<p>remove as many dependencies as possible and make the code super simple. Right now it is using underscore and Q and the code looks too cryptic unless you're familiar with those. So far using es6-promise and Promise.all has got me covered.</p>\n</li>\n<li>\n<p>Try to be as obvious as possible. This means, for example, not using \"B2G\" if we can say \"simulator\" instead. Another example from this module: <code>startB2G</code> can be renamed to <code>startSimulator</code> and it is so much evident what it is doing for someone who is not familiar with the moz-jargon.</p>\n</li>\n<li>\n<p>Only expose the API via promises. Granted you internally might need to use callbacks for other modules which are not promisified, but we want to make the whole API follow the same style, so once you learn to use one module, using another node-firefox- module is easy because the interface is the same: <code>makeACall().then(doSomethingElse)</code>.</p>\n</li>\n<li>\n<p>No CLI binary. None of the existing examples/use cases we came up with were using the CLI, so there's either no need for that or we hate the CLI. Either way there was a lot of duplicated code between modules for doing CLI and it wasn't too consistent, and we do not have too much time for this first iteration, so no CLI for now.</p>\n</li>\n<li>\n<p>For naming, try to be as generic as possible but also as semantic as possible. For example, if a module can be used to discover firefox and firefox OS runtimes, try to avoid adding 'os' to its name, so that it is more generic. Also consider if something sounds weird, maybe it's because we're using the wrong name. E.g. <code>fx-simulators</code> sounded weird until it was renamed to <code>find-simulators</code>. When in doubt, discuss it with more people! Don't be afraid :D (specially if English is not your first language!)</p>\n</li>\n<li>\n<p>Use the <a href=\"https://github.com/mozilla/node-firefox-build-tools\">build-tools</a> module and gulpfile.js to lint the code.</p>\n</li>\n</ol>", "body_text": "I'm thinking of adding these guidelines to the README as a new section so we are all on the same page. It's a way of formalising/dumping the knowledge we've acquired while tidying up the first two modules. Did I forget anything? @tofumatt @brittanystoroz\n\n\nremove as many dependencies as possible and make the code super simple. Right now it is using underscore and Q and the code looks too cryptic unless you're familiar with those. So far using es6-promise and Promise.all has got me covered.\n\n\nTry to be as obvious as possible. This means, for example, not using \"B2G\" if we can say \"simulator\" instead. Another example from this module: startB2G can be renamed to startSimulator and it is so much evident what it is doing for someone who is not familiar with the moz-jargon.\n\n\nOnly expose the API via promises. Granted you internally might need to use callbacks for other modules which are not promisified, but we want to make the whole API follow the same style, so once you learn to use one module, using another node-firefox- module is easy because the interface is the same: makeACall().then(doSomethingElse).\n\n\nNo CLI binary. None of the existing examples/use cases we came up with were using the CLI, so there's either no need for that or we hate the CLI. Either way there was a lot of duplicated code between modules for doing CLI and it wasn't too consistent, and we do not have too much time for this first iteration, so no CLI for now.\n\n\nFor naming, try to be as generic as possible but also as semantic as possible. For example, if a module can be used to discover firefox and firefox OS runtimes, try to avoid adding 'os' to its name, so that it is more generic. Also consider if something sounds weird, maybe it's because we're using the wrong name. E.g. fx-simulators sounded weird until it was renamed to find-simulators. When in doubt, discuss it with more people! Don't be afraid :D (specially if English is not your first language!)\n\n\nUse the build-tools module and gulpfile.js to lint the code.", "body": "I'm thinking of adding these guidelines to the README as a new section so we are all on the same page. It's a way of formalising/dumping the knowledge we've acquired while tidying up the first two modules. Did I forget anything? @tofumatt @brittanystoroz \n\n1) remove as many dependencies as possible and make the code super simple. Right now it is using underscore and Q and the code looks too cryptic unless you're familiar with those. So far using es6-promise and Promise.all has got me covered.\n\n2) Try to be as obvious as possible. This means, for example, not using \"B2G\" if we can say \"simulator\" instead. Another example from this module: `startB2G` can be renamed to `startSimulator` and it is so much evident what it is doing for someone who is not familiar with the moz-jargon.\n\n3) Only expose the API via promises. Granted you internally might need to use callbacks for other modules which are not promisified, but we want to make the whole API follow the same style, so once you learn to use one module, using another node-firefox- module is easy because the interface is the same: `makeACall().then(doSomethingElse)`.\n\n4) No CLI binary. None of the existing examples/use cases we came up with were using the CLI, so there's either no need for that or we hate the CLI. Either way there was a lot of duplicated code between modules for doing CLI and it wasn't too consistent, and we do not have too much time for this first iteration, so no CLI for now.\n\n5) For naming, try to be as generic as possible but also as semantic as possible. For example, if a module can be used to discover firefox and firefox OS runtimes, try to avoid adding 'os' to its name, so that it is more generic. Also consider if something sounds weird, maybe it's because we're using the wrong name. E.g. `fx-simulators` sounded weird until it was renamed to `find-simulators`. When in doubt, discuss it with more people! Don't be afraid :D (specially if English is not your first language!)\n\n6) Use the [build-tools](https://github.com/mozilla/node-firefox-build-tools) module and gulpfile.js to lint the code.\n"}