{"url": "https://api.github.com/repos/mozilla/node-firefox/issues/comments/71545924", "html_url": "https://github.com/mozilla/node-firefox/issues/15#issuecomment-71545924", "issue_url": "https://api.github.com/repos/mozilla/node-firefox/issues/15", "id": 71545924, "user": {"login": "tofumatt", "id": 90871, "avatar_url": "https://avatars2.githubusercontent.com/u/90871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tofumatt", "html_url": "https://github.com/tofumatt", "followers_url": "https://api.github.com/users/tofumatt/followers", "following_url": "https://api.github.com/users/tofumatt/following{/other_user}", "gists_url": "https://api.github.com/users/tofumatt/gists{/gist_id}", "starred_url": "https://api.github.com/users/tofumatt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tofumatt/subscriptions", "organizations_url": "https://api.github.com/users/tofumatt/orgs", "repos_url": "https://api.github.com/users/tofumatt/repos", "events_url": "https://api.github.com/users/tofumatt/events{/privacy}", "received_events_url": "https://api.github.com/users/tofumatt/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-26T21:51:38Z", "updated_at": "2015-01-26T21:51:38Z", "author_association": "MEMBER", "body_html": "<p>In general I like the idea that we can pass simple JS objects around. Seems this would either be a behind-the-scenes increase in complexity (converting objects to fancyObjects) or would require making a new Simulator() instead of just calling a function.</p>\n<p>I\u2019m not religiously opposed to the idea or anything. I can see what you mean and how it might actually be a lot better, but I\u2019d want to see a real-world example of how it would reduce code complexity before I would say it\u2019s a good idea. :-)</p>\n<p>-tofumatt</p>\n<p>On 26 January 2015 at 16:45:15, sole (<a href=\"mailto:notifications@github.com\">notifications@github.com</a>) wrote:</p>\n<p>We often handle the same type of \"objects\" when using modules in this project. They're sometimes not actual classes but just simple Objects with the same set of consistent attributes all over. A thought that often passes my mind is whether we should elevate them to their own class so we can say in the API \"This call returns an object of class XYZ\".</p>\n<p>Or whether we should maybe use those objects instead of some of their properties, and hide them in the most generic case.</p>\n<p>For example, if start-simulator would return an instance of Simulator option instead of returning a simple object, then we could also pass said instance to connect, instead of passing a port number, which requires you to know the name of the field (.port).</p>\n<p>I have to write other modules now but I wanted to leave this here before I forget or move to another thing. I might come back with more thoughts/examples. Feel free to discuss/tell me why/if I'm wrong here :-)</p>\n<p>\u2014<br>\nReply to this email directly or view it on GitHub.</p>", "body_text": "In general I like the idea that we can pass simple JS objects around. Seems this would either be a behind-the-scenes increase in complexity (converting objects to fancyObjects) or would require making a new Simulator() instead of just calling a function.\nI\u2019m not religiously opposed to the idea or anything. I can see what you mean and how it might actually be a lot better, but I\u2019d want to see a real-world example of how it would reduce code complexity before I would say it\u2019s a good idea. :-)\n-tofumatt\nOn 26 January 2015 at 16:45:15, sole (notifications@github.com) wrote:\nWe often handle the same type of \"objects\" when using modules in this project. They're sometimes not actual classes but just simple Objects with the same set of consistent attributes all over. A thought that often passes my mind is whether we should elevate them to their own class so we can say in the API \"This call returns an object of class XYZ\".\nOr whether we should maybe use those objects instead of some of their properties, and hide them in the most generic case.\nFor example, if start-simulator would return an instance of Simulator option instead of returning a simple object, then we could also pass said instance to connect, instead of passing a port number, which requires you to know the name of the field (.port).\nI have to write other modules now but I wanted to leave this here before I forget or move to another thing. I might come back with more thoughts/examples. Feel free to discuss/tell me why/if I'm wrong here :-)\n\u2014\nReply to this email directly or view it on GitHub.", "body": "In general I like the idea that we can pass simple JS objects around. Seems this would either be a behind-the-scenes increase in complexity (converting objects to fancyObjects) or would require making a new Simulator() instead of just calling a function.\n\nI\u2019m not religiously opposed to the idea or anything. I can see what you mean and how it might actually be a lot better, but I\u2019d want to see a real-world example of how it would reduce code complexity before I would say it\u2019s a good idea. :-)\n\n-tofumatt\n\nOn 26 January 2015 at 16:45:15, sole (notifications@github.com) wrote:\n\nWe often handle the same type of \"objects\" when using modules in this project. They're sometimes not actual classes but just simple Objects with the same set of consistent attributes all over. A thought that often passes my mind is whether we should elevate them to their own class so we can say in the API \"This call returns an object of class XYZ\".\n\nOr whether we should maybe use those objects instead of some of their properties, and hide them in the most generic case.\n\nFor example, if start-simulator would return an instance of Simulator option instead of returning a simple object, then we could also pass said instance to connect, instead of passing a port number, which requires you to know the name of the field (.port).\n\nI have to write other modules now but I wanted to leave this here before I forget or move to another thing. I might come back with more thoughts/examples. Feel free to discuss/tell me why/if I'm wrong here :-)\n\n\u2014\nReply to this email directly or view it on GitHub.\n"}