{"url": "https://api.github.com/repos/mozilla/node-firefox/issues/15", "repository_url": "https://api.github.com/repos/mozilla/node-firefox", "labels_url": "https://api.github.com/repos/mozilla/node-firefox/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/mozilla/node-firefox/issues/15/comments", "events_url": "https://api.github.com/repos/mozilla/node-firefox/issues/15/events", "html_url": "https://github.com/mozilla/node-firefox/issues/15", "id": 55542081, "number": 15, "title": "A discussion on the type of objects we pass around", "user": {"login": "sole", "id": 5609, "avatar_url": "https://avatars2.githubusercontent.com/u/5609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sole", "html_url": "https://github.com/sole", "followers_url": "https://api.github.com/users/sole/followers", "following_url": "https://api.github.com/users/sole/following{/other_user}", "gists_url": "https://api.github.com/users/sole/gists{/gist_id}", "starred_url": "https://api.github.com/users/sole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sole/subscriptions", "organizations_url": "https://api.github.com/users/sole/orgs", "repos_url": "https://api.github.com/users/sole/repos", "events_url": "https://api.github.com/users/sole/events{/privacy}", "received_events_url": "https://api.github.com/users/sole/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 114816050, "url": "https://api.github.com/repos/mozilla/node-firefox/labels/question", "name": "question", "color": "cc317c", "default": true}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-26T21:45:13Z", "updated_at": "2015-01-26T22:18:38Z", "closed_at": null, "author_association": "MEMBER", "body_html": "<p>We often handle the same type of \"objects\" when using modules in this project. They're sometimes not actual classes but just simple <code>Objects</code> with the same set of consistent attributes all over. A thought that often passes my mind is whether we should <em>elevate</em> them to their own class so we can say in the API \"This call returns an object of class XYZ\".</p>\n<p>Or whether we should maybe use those objects instead of some of their properties, and hide them in the most generic case.</p>\n<p>For example, if <code>start-simulator</code> would return an instance of <code>Simulator</code> option instead of returning a simple object, then we could also pass said instance to <code>connect</code>, instead of passing a port number, which requires you to know the name of the field (<code>.port</code>).</p>\n<p>I have to write other modules now but I wanted to leave this here before I forget or move to another thing. I might come back with more thoughts/examples. Feel free to discuss/tell me why/if I'm wrong here :-)</p>", "body_text": "We often handle the same type of \"objects\" when using modules in this project. They're sometimes not actual classes but just simple Objects with the same set of consistent attributes all over. A thought that often passes my mind is whether we should elevate them to their own class so we can say in the API \"This call returns an object of class XYZ\".\nOr whether we should maybe use those objects instead of some of their properties, and hide them in the most generic case.\nFor example, if start-simulator would return an instance of Simulator option instead of returning a simple object, then we could also pass said instance to connect, instead of passing a port number, which requires you to know the name of the field (.port).\nI have to write other modules now but I wanted to leave this here before I forget or move to another thing. I might come back with more thoughts/examples. Feel free to discuss/tell me why/if I'm wrong here :-)", "body": "We often handle the same type of \"objects\" when using modules in this project. They're sometimes not actual classes but just simple `Objects` with the same set of consistent attributes all over. A thought that often passes my mind is whether we should _elevate_ them to their own class so we can say in the API \"This call returns an object of class XYZ\".\n\nOr whether we should maybe use those objects instead of some of their properties, and hide them in the most generic case.\n\nFor example, if `start-simulator` would return an instance of `Simulator` option instead of returning a simple object, then we could also pass said instance to `connect`, instead of passing a port number, which requires you to know the name of the field (`.port`).\n\nI have to write other modules now but I wanted to leave this here before I forget or move to another thing. I might come back with more thoughts/examples. Feel free to discuss/tell me why/if I'm wrong here :-)\n"}