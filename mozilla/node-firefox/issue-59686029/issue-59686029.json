{"url": "https://api.github.com/repos/mozilla/node-firefox/issues/26", "repository_url": "https://api.github.com/repos/mozilla/node-firefox", "labels_url": "https://api.github.com/repos/mozilla/node-firefox/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/mozilla/node-firefox/issues/26/comments", "events_url": "https://api.github.com/repos/mozilla/node-firefox/issues/26/events", "html_url": "https://github.com/mozilla/node-firefox/issues/26", "id": 59686029, "number": 26, "title": "Examples should use chained promises to simplify callback pyramids", "user": {"login": "lmorchard", "id": 21687, "avatar_url": "https://avatars1.githubusercontent.com/u/21687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lmorchard", "html_url": "https://github.com/lmorchard", "followers_url": "https://api.github.com/users/lmorchard/followers", "following_url": "https://api.github.com/users/lmorchard/following{/other_user}", "gists_url": "https://api.github.com/users/lmorchard/gists{/gist_id}", "starred_url": "https://api.github.com/users/lmorchard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lmorchard/subscriptions", "organizations_url": "https://api.github.com/users/lmorchard/orgs", "repos_url": "https://api.github.com/users/lmorchard/repos", "events_url": "https://api.github.com/users/lmorchard/events{/privacy}", "received_events_url": "https://api.github.com/users/lmorchard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-03-03T18:44:03Z", "updated_at": "2015-03-09T12:34:26Z", "closed_at": null, "author_association": "MEMBER", "body_html": "<p>Promises can be chained, rather than nested like callbacks. That makes code much cleaner. Here's a quick sample of dirty code I'm using to exercise modules:</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> path <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>path<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">var</span> fs <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>fs<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-k\">var</span> <span class=\"pl-c1\">Promise</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>es6-Promise<span class=\"pl-pds\">'</span></span>).<span class=\"pl-smi\">Promise</span>;\n\n<span class=\"pl-k\">var</span> startSimulator <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./node-firefox-start-simulator<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">var</span> connect <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./node-firefox-connect<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">var</span> installApp <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./node-firefox-install-app<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">var</span> findApp <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./node-firefox-find-app<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">var</span> launchApp <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./node-firefox-launch-app<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">var</span> uninstallApp <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./node-firefox-uninstall-app<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-k\">var</span> appPath <span class=\"pl-k\">=</span> <span class=\"pl-smi\">path</span>.<span class=\"pl-c1\">join</span>(<span class=\"pl-c1\">__dirname</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>node-firefox-install-app/examples/sampleApp<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">var</span> manifest <span class=\"pl-k\">=</span> <span class=\"pl-c1\">JSON</span>.<span class=\"pl-c1\">parse</span>(<span class=\"pl-smi\">fs</span>.<span class=\"pl-en\">readFileSync</span>(appPath <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/manifest.webapp<span class=\"pl-pds\">'</span></span>));\n\n<span class=\"pl-k\">var</span> client, simulator, appId, installedApp;\n\n<span class=\"pl-en\">startSimulator</span>().<span class=\"pl-en\">then</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">result</span>) {\n  simulator <span class=\"pl-k\">=</span> result;\n  <span class=\"pl-k\">return</span> <span class=\"pl-en\">connect</span>(<span class=\"pl-smi\">simulator</span>.<span class=\"pl-c1\">port</span>);\n}).<span class=\"pl-en\">then</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">result</span>) {\n  client <span class=\"pl-k\">=</span> result;\n  <span class=\"pl-k\">return</span> <span class=\"pl-en\">installApp</span>({ client<span class=\"pl-k\">:</span> client, appPath<span class=\"pl-k\">:</span> appPath });\n}).<span class=\"pl-en\">then</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">result</span>) {\n  appId <span class=\"pl-k\">=</span> result;\n  <span class=\"pl-k\">return</span> <span class=\"pl-en\">findApp</span>({ client<span class=\"pl-k\">:</span> client, manifest<span class=\"pl-k\">:</span> manifest });\n}).<span class=\"pl-en\">then</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">apps</span>) {\n  installedApp <span class=\"pl-k\">=</span> <span class=\"pl-smi\">apps</span>.<span class=\"pl-en\">filter</span>(<span class=\"pl-k\">function</span> (<span class=\"pl-smi\">app</span>) { <span class=\"pl-k\">return</span> <span class=\"pl-smi\">app</span>.<span class=\"pl-c1\">id</span> <span class=\"pl-k\">==</span> appId; })[<span class=\"pl-c1\">0</span>];\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>installedApp) { <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Installed app not found!<span class=\"pl-pds\">'</span></span>); }\n  <span class=\"pl-k\">return</span> <span class=\"pl-en\">launchApp</span>({ client<span class=\"pl-k\">:</span> client, manifestURL<span class=\"pl-k\">:</span> <span class=\"pl-smi\">installedApp</span>.<span class=\"pl-smi\">manifestURL</span> });\n}).<span class=\"pl-en\">then</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">result</span>) {\n  <span class=\"pl-k\">return</span> <span class=\"pl-en\">delay</span>(<span class=\"pl-c1\">3000</span>);\n}).<span class=\"pl-en\">then</span>(<span class=\"pl-k\">function</span>() {\n  <span class=\"pl-k\">return</span> <span class=\"pl-en\">uninstallApp</span>({ client<span class=\"pl-k\">:</span> client, manifestURL<span class=\"pl-k\">:</span> <span class=\"pl-smi\">installedApp</span>.<span class=\"pl-smi\">manifestURL</span> });\n}).<span class=\"pl-en\">then</span>(<span class=\"pl-k\">function</span>() {\n  <span class=\"pl-smi\">client</span>.<span class=\"pl-c1\">disconnect</span>();\n  <span class=\"pl-c1\">process</span>.<span class=\"pl-en\">kill</span>(<span class=\"pl-smi\">simulator</span>.<span class=\"pl-smi\">pid</span>);\n  <span class=\"pl-c1\">process</span>.<span class=\"pl-en\">exit</span>();\n}).<span class=\"pl-en\">catch</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">err</span>) {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Error<span class=\"pl-pds\">'</span></span>, err);\n  <span class=\"pl-c1\">process</span>.<span class=\"pl-en\">exit</span>();\n});\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">delay</span>(<span class=\"pl-smi\">ms</span>) {\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Promise</span>(<span class=\"pl-k\">function</span> (<span class=\"pl-smi\">resolve</span>, <span class=\"pl-smi\">reject</span>) {\n    <span class=\"pl-c1\">setTimeout</span>(resolve, ms);\n  });\n}</pre></div>\n<p>I'll probably work through the various libraries and submit PRs myself. But, here's an issue filed just in case I don't get around to it.</p>", "body_text": "Promises can be chained, rather than nested like callbacks. That makes code much cleaner. Here's a quick sample of dirty code I'm using to exercise modules:\nvar path = require('path');\nvar fs = require('fs');\n\nvar Promise = require('es6-Promise').Promise;\n\nvar startSimulator = require('./node-firefox-start-simulator');\nvar connect = require('./node-firefox-connect');\nvar installApp = require('./node-firefox-install-app');\nvar findApp = require('./node-firefox-find-app');\nvar launchApp = require('./node-firefox-launch-app');\nvar uninstallApp = require('./node-firefox-uninstall-app');\n\nvar appPath = path.join(__dirname, 'node-firefox-install-app/examples/sampleApp');\nvar manifest = JSON.parse(fs.readFileSync(appPath + '/manifest.webapp'));\n\nvar client, simulator, appId, installedApp;\n\nstartSimulator().then(function(result) {\n  simulator = result;\n  return connect(simulator.port);\n}).then(function(result) {\n  client = result;\n  return installApp({ client: client, appPath: appPath });\n}).then(function(result) {\n  appId = result;\n  return findApp({ client: client, manifest: manifest });\n}).then(function(apps) {\n  installedApp = apps.filter(function (app) { return app.id == appId; })[0];\n  if (!installedApp) { throw new Error('Installed app not found!'); }\n  return launchApp({ client: client, manifestURL: installedApp.manifestURL });\n}).then(function(result) {\n  return delay(3000);\n}).then(function() {\n  return uninstallApp({ client: client, manifestURL: installedApp.manifestURL });\n}).then(function() {\n  client.disconnect();\n  process.kill(simulator.pid);\n  process.exit();\n}).catch(function(err) {\n  console.error('Error', err);\n  process.exit();\n});\n\nfunction delay(ms) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(resolve, ms);\n  });\n}\nI'll probably work through the various libraries and submit PRs myself. But, here's an issue filed just in case I don't get around to it.", "body": "Promises can be chained, rather than nested like callbacks. That makes code much cleaner. Here's a quick sample of dirty code I'm using to exercise modules:\n\n``` javascript\nvar path = require('path');\nvar fs = require('fs');\n\nvar Promise = require('es6-Promise').Promise;\n\nvar startSimulator = require('./node-firefox-start-simulator');\nvar connect = require('./node-firefox-connect');\nvar installApp = require('./node-firefox-install-app');\nvar findApp = require('./node-firefox-find-app');\nvar launchApp = require('./node-firefox-launch-app');\nvar uninstallApp = require('./node-firefox-uninstall-app');\n\nvar appPath = path.join(__dirname, 'node-firefox-install-app/examples/sampleApp');\nvar manifest = JSON.parse(fs.readFileSync(appPath + '/manifest.webapp'));\n\nvar client, simulator, appId, installedApp;\n\nstartSimulator().then(function(result) {\n  simulator = result;\n  return connect(simulator.port);\n}).then(function(result) {\n  client = result;\n  return installApp({ client: client, appPath: appPath });\n}).then(function(result) {\n  appId = result;\n  return findApp({ client: client, manifest: manifest });\n}).then(function(apps) {\n  installedApp = apps.filter(function (app) { return app.id == appId; })[0];\n  if (!installedApp) { throw new Error('Installed app not found!'); }\n  return launchApp({ client: client, manifestURL: installedApp.manifestURL });\n}).then(function(result) {\n  return delay(3000);\n}).then(function() {\n  return uninstallApp({ client: client, manifestURL: installedApp.manifestURL });\n}).then(function() {\n  client.disconnect();\n  process.kill(simulator.pid);\n  process.exit();\n}).catch(function(err) {\n  console.error('Error', err);\n  process.exit();\n});\n\nfunction delay(ms) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(resolve, ms);\n  });\n}\n```\n\nI'll probably work through the various libraries and submit PRs myself. But, here's an issue filed just in case I don't get around to it.\n"}