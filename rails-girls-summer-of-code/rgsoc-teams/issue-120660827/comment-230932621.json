{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/comments/230932621", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/issues/346#issuecomment-230932621", "issue_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/346", "id": 230932621, "user": {"login": "michaelem", "id": 182228, "avatar_url": "https://avatars3.githubusercontent.com/u/182228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelem", "html_url": "https://github.com/michaelem", "followers_url": "https://api.github.com/users/michaelem/followers", "following_url": "https://api.github.com/users/michaelem/following{/other_user}", "gists_url": "https://api.github.com/users/michaelem/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelem/subscriptions", "organizations_url": "https://api.github.com/users/michaelem/orgs", "repos_url": "https://api.github.com/users/michaelem/repos", "events_url": "https://api.github.com/users/michaelem/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelem/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-06T22:58:05Z", "updated_at": "2016-07-06T22:58:05Z", "author_association": "MEMBER", "body_html": "<p>What I usually do in that case is just define the minimal required model class inside the migration. That way you can still use ActiveRecord in the migration without running the risk of the class not being there at some point down the line.<br>\nIt also does not add a lot of complexity since usually its just an empty Subclass of ActiveRecord::Base with maybe one belongs_to statement (whatever you need to do the migration).<br>\nDoes that make sense in our case?</p>", "body_text": "What I usually do in that case is just define the minimal required model class inside the migration. That way you can still use ActiveRecord in the migration without running the risk of the class not being there at some point down the line.\nIt also does not add a lot of complexity since usually its just an empty Subclass of ActiveRecord::Base with maybe one belongs_to statement (whatever you need to do the migration).\nDoes that make sense in our case?", "body": "What I usually do in that case is just define the minimal required model class inside the migration. That way you can still use ActiveRecord in the migration without running the risk of the class not being there at some point down the line.\nIt also does not add a lot of complexity since usually its just an empty Subclass of ActiveRecord::Base with maybe one belongs_to statement (whatever you need to do the migration).\nDoes that make sense in our case?\n"}