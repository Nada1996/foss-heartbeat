{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/63766170", "pull_request_review_id": null, "id": 63766170, "diff_hunk": "@@ -18,11 +18,23 @@\n     include_context 'with admin logged in'\n \n     describe \"GET index\" do\n-      it \"assigns all teams as @teams\" do\n+      let(:second_team) { create(:team, :current_season) }\n+      let(:third_team) { create(:team, :current_season) }\n+\n+      before do\n+        allow(team).to receive(:sponsored?).and_return(true)", "path": "spec/controllers/orga/teams_controller_spec.rb", "position": null, "original_position": 18, "commit_id": "dc574549f395fd6913d215620dd5896f25cd00e5", "original_commit_id": "cc309f4307fa05e852e25e5beec75203c3a85950", "user": {"login": "carpodaster", "id": 164400, "avatar_url": "https://avatars2.githubusercontent.com/u/164400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carpodaster", "html_url": "https://github.com/carpodaster", "followers_url": "https://api.github.com/users/carpodaster/followers", "following_url": "https://api.github.com/users/carpodaster/following{/other_user}", "gists_url": "https://api.github.com/users/carpodaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/carpodaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carpodaster/subscriptions", "organizations_url": "https://api.github.com/users/carpodaster/orgs", "repos_url": "https://api.github.com/users/carpodaster/repos", "events_url": "https://api.github.com/users/carpodaster/events{/privacy}", "received_events_url": "https://api.github.com/users/carpodaster/received_events", "type": "User", "site_admin": false}, "body": "This won't stub the `sponsored?` predicate in the controller instance \u2013 it will retrieve a fresh instance from the database. The `spec/factories/teams.rb` Team factory already sets `kind` to `\"sponsored\"` so we currently don't have a test case for the teams that should be left out.\n\nProposal for updated examples (just entered it here on GH, beware of errors ;) ):\n\n``` ruby\ndescribe 'GET index' do\n  let!(:voluntary_team)  { create :team, :current_season, kind: 'voluntary' }\n  let!(:sponsored_team)  { create :team, :current_season, kind: 'sponsored' }\n  let!(:unaccepted_team) { create :team, :current_season, kind: nil }\n\n  it 'assigns only selected teams as @teams' do\n    get :index\n    expect(assigns(:teams)).to match_array [voluntary_team, sponsored_team]\n  end\n\n  it 'assigns all teams as @teams when requested' do\n    get :index, filter: 'all' # or whatever param it will turn out to be\n    expect(assigns(:teams)).to match_array [voluntary_team, sponsored_team, unaccepted_team]\n  end\nend\n```\n", "created_at": "2016-05-18T19:28:07Z", "updated_at": "2016-05-18T21:13:24Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/461#discussion_r63766170", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/461", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/63766170"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/461#discussion_r63766170"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/461"}}, "body_html": "<p>This won't stub the <code>sponsored?</code> predicate in the controller instance \u2013 it will retrieve a fresh instance from the database. The <code>spec/factories/teams.rb</code> Team factory already sets <code>kind</code> to <code>\"sponsored\"</code> so we currently don't have a test case for the teams that should be left out.</p>\n<p>Proposal for updated examples (just entered it here on GH, beware of errors ;) ):</p>\n<div class=\"highlight highlight-source-ruby\"><pre>describe <span class=\"pl-s\"><span class=\"pl-pds\">'</span>GET index<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">do</span>\n  let!(<span class=\"pl-c1\">:voluntary_team</span>)  { create <span class=\"pl-c1\">:team</span>, <span class=\"pl-c1\">:current_season</span>, <span class=\"pl-c1\">kind:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>voluntary<span class=\"pl-pds\">'</span></span> }\n  let!(<span class=\"pl-c1\">:sponsored_team</span>)  { create <span class=\"pl-c1\">:team</span>, <span class=\"pl-c1\">:current_season</span>, <span class=\"pl-c1\">kind:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>sponsored<span class=\"pl-pds\">'</span></span> }\n  let!(<span class=\"pl-c1\">:unaccepted_team</span>) { create <span class=\"pl-c1\">:team</span>, <span class=\"pl-c1\">:current_season</span>, <span class=\"pl-c1\">kind:</span> <span class=\"pl-c1\">nil</span> }\n\n  it <span class=\"pl-s\"><span class=\"pl-pds\">'</span>assigns only selected teams as @teams<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">do</span>\n    get <span class=\"pl-c1\">:index</span>\n    expect(assigns(<span class=\"pl-c1\">:teams</span>)).to match_array [voluntary_team, sponsored_team]\n  <span class=\"pl-k\">end</span>\n\n  it <span class=\"pl-s\"><span class=\"pl-pds\">'</span>assigns all teams as @teams when requested<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">do</span>\n    get <span class=\"pl-c1\">:index</span>, <span class=\"pl-c1\">filter:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>all<span class=\"pl-pds\">'</span></span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> or whatever param it will turn out to be</span>\n    expect(assigns(<span class=\"pl-c1\">:teams</span>)).to match_array [voluntary_team, sponsored_team, unaccepted_team]\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre></div>", "body_text": "This won't stub the sponsored? predicate in the controller instance \u2013 it will retrieve a fresh instance from the database. The spec/factories/teams.rb Team factory already sets kind to \"sponsored\" so we currently don't have a test case for the teams that should be left out.\nProposal for updated examples (just entered it here on GH, beware of errors ;) ):\ndescribe 'GET index' do\n  let!(:voluntary_team)  { create :team, :current_season, kind: 'voluntary' }\n  let!(:sponsored_team)  { create :team, :current_season, kind: 'sponsored' }\n  let!(:unaccepted_team) { create :team, :current_season, kind: nil }\n\n  it 'assigns only selected teams as @teams' do\n    get :index\n    expect(assigns(:teams)).to match_array [voluntary_team, sponsored_team]\n  end\n\n  it 'assigns all teams as @teams when requested' do\n    get :index, filter: 'all' # or whatever param it will turn out to be\n    expect(assigns(:teams)).to match_array [voluntary_team, sponsored_team, unaccepted_team]\n  end\nend"}