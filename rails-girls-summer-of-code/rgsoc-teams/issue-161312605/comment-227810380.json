{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/comments/227810380", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/471#issuecomment-227810380", "issue_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/471", "id": 227810380, "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-22T17:04:01Z", "updated_at": "2016-06-22T17:04:01Z", "author_association": "MEMBER", "body_html": "<p>Well, they just <em>encourage</em> you to use the expect-syntax, not <strong>force</strong>, since there seem to be some cases where you could prefer it... so maybe that's why there are no deprecation warnings. It will at some point maybe extract into a gem - so they kinda seem to want to get rid of it <g-emoji class=\"g-emoji\" alias=\"wink\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f609.png\">\ud83d\ude09</g-emoji></p>\n<p>Disabling it entirely, don't know if really necessary, but you could give it a try:</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-c1\">RSpec</span>.configure <span class=\"pl-k\">do</span> |<span class=\"pl-smi\">config</span>|\n  config.expect_with <span class=\"pl-c1\">:rspec</span> <span class=\"pl-k\">do</span> |<span class=\"pl-smi\">c</span>|\n    c.syntax <span class=\"pl-k\">=</span> <span class=\"pl-c1\">:expect</span>             <span class=\"pl-c\"><span class=\"pl-c\">#</span> disables `should`</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> or</span>\n    c.syntax <span class=\"pl-k\">=</span> <span class=\"pl-c1\">:should</span>             <span class=\"pl-c\"><span class=\"pl-c\">#</span> disables `expect`</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> or</span>\n    c.syntax <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">:should</span>, <span class=\"pl-c1\">:expect</span>]  <span class=\"pl-c\"><span class=\"pl-c\">#</span> default, enables both `should` and `expect`</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre></div>", "body_text": "Well, they just encourage you to use the expect-syntax, not force, since there seem to be some cases where you could prefer it... so maybe that's why there are no deprecation warnings. It will at some point maybe extract into a gem - so they kinda seem to want to get rid of it \ud83d\ude09\nDisabling it entirely, don't know if really necessary, but you could give it a try:\nRSpec.configure do |config|\n  config.expect_with :rspec do |c|\n    c.syntax = :expect             # disables `should`\n    # or\n    c.syntax = :should             # disables `expect`\n    # or\n    c.syntax = [:should, :expect]  # default, enables both `should` and `expect`\n  end\nend", "body": "Well, they just _encourage_ you to use the expect-syntax, not **force**, since there seem to be some cases where you could prefer it... so maybe that's why there are no deprecation warnings. It will at some point maybe extract into a gem - so they kinda seem to want to get rid of it \ud83d\ude09 \n\nDisabling it entirely, don't know if really necessary, but you could give it a try:\n\n``` ruby\nRSpec.configure do |config|\n  config.expect_with :rspec do |c|\n    c.syntax = :expect             # disables `should`\n    # or\n    c.syntax = :should             # disables `expect`\n    # or\n    c.syntax = [:should, :expect]  # default, enables both `should` and `expect`\n  end\nend\n```\n"}