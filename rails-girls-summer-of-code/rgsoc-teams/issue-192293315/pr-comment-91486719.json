{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/91486719", "pull_request_review_id": 11994550, "id": 91486719, "diff_hunk": "@@ -4,6 +4,11 @@ class UsersController < ApplicationController\n \n   load_and_authorize_resource except: [:index, :show]\n \n+  # limit is set on conference attendances", "path": "app/controllers/users_controller.rb", "position": 4, "original_position": 4, "commit_id": "46517ebe3a9a92c8fc63f3a0af2e438db1ce3471", "original_commit_id": "46517ebe3a9a92c8fc63f3a0af2e438db1ce3471", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "body": "It looks kinda weird to me to rescue these model-validation-related exceptions in a controller @F3PiX. I guess moving this closer to the User model and its validations would make more sense? \r\n\r\nYou could either pack it into some `before_save` or whatever callbacks... Or you just don't use the `limit` option for the association but instead just a \"normal validation.\r\n```ruby\r\nvalidates :attendances, length: { maximum: 3 }\r\n```\r\nshould work as well I think.\r\n\r\nHowever, since submitting an invalid number of conference attendances is already prevented on client side and then fully enforced on DB level (because save will never happen if the error is raised), I guess its also totally fine to give the client a 500. Because in this case *\"something really went wrong\"*, e.g. someone by hand manipulated the form, the JS is not working, etc. And these are probably errors we should not cover but act upon.\r\n", "created_at": "2016-12-08T10:31:22Z", "updated_at": "2016-12-08T10:31:22Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/565#discussion_r91486719", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/565", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/91486719"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/565#discussion_r91486719"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/565"}}, "body_html": "<p>It looks kinda weird to me to rescue these model-validation-related exceptions in a controller <a href=\"https://github.com/f3pix\" class=\"user-mention\">@F3PiX</a>. I guess moving this closer to the User model and its validations would make more sense?</p>\n<p>You could either pack it into some <code>before_save</code> or whatever callbacks... Or you just don't use the <code>limit</code> option for the association but instead just a \"normal validation.</p>\n<div class=\"highlight highlight-source-ruby\"><pre>validates <span class=\"pl-c1\">:attendances</span>, <span class=\"pl-c1\">length:</span> { <span class=\"pl-c1\">maximum:</span> <span class=\"pl-c1\">3</span> }</pre></div>\n<p>should work as well I think.</p>\n<p>However, since submitting an invalid number of conference attendances is already prevented on client side and then fully enforced on DB level (because save will never happen if the error is raised), I guess its also totally fine to give the client a 500. Because in this case <em>\"something really went wrong\"</em>, e.g. someone by hand manipulated the form, the JS is not working, etc. And these are probably errors we should not cover but act upon.</p>", "body_text": "It looks kinda weird to me to rescue these model-validation-related exceptions in a controller @F3PiX. I guess moving this closer to the User model and its validations would make more sense?\nYou could either pack it into some before_save or whatever callbacks... Or you just don't use the limit option for the association but instead just a \"normal validation.\nvalidates :attendances, length: { maximum: 3 }\nshould work as well I think.\nHowever, since submitting an invalid number of conference attendances is already prevented on client side and then fully enforced on DB level (because save will never happen if the error is raised), I guess its also totally fine to give the client a 500. Because in this case \"something really went wrong\", e.g. someone by hand manipulated the form, the JS is not working, etc. And these are probably errors we should not cover but act upon."}