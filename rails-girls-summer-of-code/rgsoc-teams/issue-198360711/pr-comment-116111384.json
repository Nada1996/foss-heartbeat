{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/116111384", "pull_request_review_id": 37702315, "id": 116111384, "diff_hunk": "@@ -4,32 +4,61 @@\n context 'when switching phases' do\n   subject { Season.current }\n \n-  describe '#fake_application_phase' do\n-    it 'timeshifts the application phase to today' do\n-      Timecop.travel(Season.current.applications_close_at - 1.month) do\n-        Season::PhaseSwitcher.fake_application_phase\n-        expect(subject).to be_application_period\n+  describe 'destined' do\n+\n+    it 'sends the params to a phase setting method' do\n+      phase = 'fake_application_phase'\n+      Season::PhaseSwitcher.destined(phase)\n+      expect(subject).to_not be_nil\n+    end\n+\n+    context 'when directed to the #fake_application_phase' do\n+      it 'sets date range so that the season is open for application submissions' do\n+        phase = 'fake_application_phase'\n+        Timecop.travel(Season.current.applications_close_at - 1.month) do\n+          Season::PhaseSwitcher.destined(phase)\n+          expect(subject).to_not be_nil\n+          expect(subject).to be_application_period\n+        end\n       end\n     end\n-  end\n \n-  describe '#fake_coding_phase' do\n-    it 'timeshifts the coding phase to today' do\n-      Timecop.travel(Season.current.ends_at - 1.week) do\n-        Season::PhaseSwitcher.fake_coding_phase\n-        expect(subject).to be_started\n+    context 'when directed to the #fake_coding_phase' do\n+      it 'sets dates so that the summer of code is currently happening' do\n+        phase = 'fake_coding_phase'\n+        Timecop.travel(Season.current.ends_at - 1.week) do", "path": "spec/models/season/phase_switcher_spec.rb", "position": null, "original_position": 37, "commit_id": "4c120f41f14b541cf49d9fc05bb70c5382c8ba91", "original_commit_id": "6053436616a8e6257c1e0d6427b29a845dd18e40", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "body": "Why is it necessary to do timetravel here *(this also applies to the following specs)*? The way I understand it, the underlying methods just update the certain values for the current `season`. So in theory it should be enough to do something along the lines of\r\n```ruby\r\nexpect(Season)\r\n  .to receive(:current)\r\n  .and_return(season)\r\nexpect(season)\r\n  .to receive(:update)\r\n  .with(# all the things)\r\n```\r\nshouldn't it?\r\n\r\nBesides that, I don't really understand why `Season.current` is the `subject` of your specs here. Isn't the thing that's being tested the `PhaseSwitcher`? So in my opinion, the `subject` should actually be\r\n```ruby\r\ndescribed_class.destined(phase)\r\n```\r\nthen you can of course also expect the changes on a season record with this. But I think this is outta scope for this test - the `Season` is already tested. I'd simply test if the respective methods get called on the season object.", "created_at": "2017-05-11T21:52:56Z", "updated_at": "2017-05-14T21:21:53Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/585#discussion_r116111384", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/585", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/116111384"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/585#discussion_r116111384"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/585"}}, "body_html": "<p>Why is it necessary to do timetravel here <em>(this also applies to the following specs)</em>? The way I understand it, the underlying methods just update the certain values for the current <code>season</code>. So in theory it should be enough to do something along the lines of</p>\n<div class=\"highlight highlight-source-ruby\"><pre>expect(<span class=\"pl-c1\">Season</span>)\n  .to receive(<span class=\"pl-c1\">:current</span>)\n  .and_return(season)\nexpect(season)\n  .to receive(<span class=\"pl-c1\">:update</span>)\n  .with(<span class=\"pl-c\"><span class=\"pl-c\">#</span> all the things)</span></pre></div>\n<p>shouldn't it?</p>\n<p>Besides that, I don't really understand why <code>Season.current</code> is the <code>subject</code> of your specs here. Isn't the thing that's being tested the <code>PhaseSwitcher</code>? So in my opinion, the <code>subject</code> should actually be</p>\n<div class=\"highlight highlight-source-ruby\"><pre>described_class.destined(phase)</pre></div>\n<p>then you can of course also expect the changes on a season record with this. But I think this is outta scope for this test - the <code>Season</code> is already tested. I'd simply test if the respective methods get called on the season object.</p>", "body_text": "Why is it necessary to do timetravel here (this also applies to the following specs)? The way I understand it, the underlying methods just update the certain values for the current season. So in theory it should be enough to do something along the lines of\nexpect(Season)\n  .to receive(:current)\n  .and_return(season)\nexpect(season)\n  .to receive(:update)\n  .with(# all the things)\nshouldn't it?\nBesides that, I don't really understand why Season.current is the subject of your specs here. Isn't the thing that's being tested the PhaseSwitcher? So in my opinion, the subject should actually be\ndescribed_class.destined(phase)\nthen you can of course also expect the changes on a season record with this. But I think this is outta scope for this test - the Season is already tested. I'd simply test if the respective methods get called on the season object."}