{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/116357412", "pull_request_review_id": 37978564, "id": 116357412, "diff_hunk": "@@ -4,32 +4,61 @@\n context 'when switching phases' do\n   subject { Season.current }\n \n-  describe '#fake_application_phase' do\n-    it 'timeshifts the application phase to today' do\n-      Timecop.travel(Season.current.applications_close_at - 1.month) do\n-        Season::PhaseSwitcher.fake_application_phase\n-        expect(subject).to be_application_period\n+  describe 'destined' do\n+\n+    it 'sends the params to a phase setting method' do\n+      phase = 'fake_application_phase'\n+      Season::PhaseSwitcher.destined(phase)\n+      expect(subject).to_not be_nil\n+    end\n+\n+    context 'when directed to the #fake_application_phase' do\n+      it 'sets date range so that the season is open for application submissions' do\n+        phase = 'fake_application_phase'\n+        Timecop.travel(Season.current.applications_close_at - 1.month) do\n+          Season::PhaseSwitcher.destined(phase)\n+          expect(subject).to_not be_nil\n+          expect(subject).to be_application_period\n+        end\n       end\n     end\n-  end\n \n-  describe '#fake_coding_phase' do\n-    it 'timeshifts the coding phase to today' do\n-      Timecop.travel(Season.current.ends_at - 1.week) do\n-        Season::PhaseSwitcher.fake_coding_phase\n-        expect(subject).to be_started\n+    context 'when directed to the #fake_coding_phase' do\n+      it 'sets dates so that the summer of code is currently happening' do\n+        phase = 'fake_coding_phase'\n+        Timecop.travel(Season.current.ends_at - 1.week) do", "path": "spec/models/season/phase_switcher_spec.rb", "position": null, "original_position": 37, "commit_id": "4c120f41f14b541cf49d9fc05bb70c5382c8ba91", "original_commit_id": "6053436616a8e6257c1e0d6427b29a845dd18e40", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "body": "Ok. So I'm having a look at the respective files locally.\r\n\r\nFirst of all, in order to be able to use `described_class`, the spec needs to be setup as a proper (model) spec. So start the file with:\r\n```ruby\r\nrequire 'spec_helper'\r\n\r\ndescribe Season::PhaseSwitcher do\r\n  context 'when switching phases' do\r\n    # ...\r\n```\r\n\r\nOnce you've done this, the expectation needs to include the `Season` module as well:\r\n```ruby\r\nit \"is available as described_class\" do\r\n  expect(described_class).to eq(Season::PhaseSwitcher)\r\nend\r\n```\r\nThis is necessary because you're out of the `Season` \"namespace\" in the spec file. You could of course go into it by setting this up like this:\r\n```ruby\r\nrequire 'spec_helper'\r\n\r\nmodule Season\r\n  describe PhaseSwitcher do\r\n# ...\r\n```\r\nHowever, I **strongly** advise not to do it! `Season` is not a module but a class and the `PhaseSwitcher` class not set up to be within the `Season` namespace. If it would, it would look like this:\r\n```ruby\r\nmodule Season\r\n  class PhaseSwitcher\r\n```\r\nHowever, with Rails \ud83d\udca9 autoloading stuff, you'll run into troubles with this anyways \ud83d\ude09 \r\n\r\nOnce you got the spec files, namespaces, etc. sorted out, let me know how I can help with the tests themselves.\r\n\r\n", "created_at": "2017-05-13T12:28:26Z", "updated_at": "2017-05-14T21:21:53Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/585#discussion_r116357412", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/585", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/116357412"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/585#discussion_r116357412"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/585"}}, "body_html": "<p>Ok. So I'm having a look at the respective files locally.</p>\n<p>First of all, in order to be able to use <code>described_class</code>, the spec needs to be setup as a proper (model) spec. So start the file with:</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-k\">require</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>spec_helper<span class=\"pl-pds\">'</span></span>\n\ndescribe <span class=\"pl-c1\">Season</span>::<span class=\"pl-c1\">PhaseSwitcher</span> <span class=\"pl-k\">do</span>\n  context <span class=\"pl-s\"><span class=\"pl-pds\">'</span>when switching phases<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">do</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span></pre></div>\n<p>Once you've done this, the expectation needs to include the <code>Season</code> module as well:</p>\n<div class=\"highlight highlight-source-ruby\"><pre>it <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>is available as described_class<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">do</span>\n  expect(described_class).to eq(<span class=\"pl-c1\">Season</span>::<span class=\"pl-c1\">PhaseSwitcher</span>)\n<span class=\"pl-k\">end</span></pre></div>\n<p>This is necessary because you're out of the <code>Season</code> \"namespace\" in the spec file. You could of course go into it by setting this up like this:</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-k\">require</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>spec_helper<span class=\"pl-pds\">'</span></span>\n\n<span class=\"pl-k\">module</span> <span class=\"pl-en\">Season</span>\n  describe <span class=\"pl-c1\">PhaseSwitcher</span> <span class=\"pl-k\">do</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span></pre></div>\n<p>However, I <strong>strongly</strong> advise not to do it! <code>Season</code> is not a module but a class and the <code>PhaseSwitcher</code> class not set up to be within the <code>Season</code> namespace. If it would, it would look like this:</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-k\">module</span> <span class=\"pl-en\">Season</span>\n  <span class=\"pl-k\">class</span> <span class=\"pl-en\">PhaseSwitcher</span></pre></div>\n<p>However, with Rails <g-emoji class=\"g-emoji\" alias=\"hankey\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f4a9.png\">\ud83d\udca9</g-emoji> autoloading stuff, you'll run into troubles with this anyways <g-emoji class=\"g-emoji\" alias=\"wink\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f609.png\">\ud83d\ude09</g-emoji></p>\n<p>Once you got the spec files, namespaces, etc. sorted out, let me know how I can help with the tests themselves.</p>", "body_text": "Ok. So I'm having a look at the respective files locally.\nFirst of all, in order to be able to use described_class, the spec needs to be setup as a proper (model) spec. So start the file with:\nrequire 'spec_helper'\n\ndescribe Season::PhaseSwitcher do\n  context 'when switching phases' do\n    # ...\nOnce you've done this, the expectation needs to include the Season module as well:\nit \"is available as described_class\" do\n  expect(described_class).to eq(Season::PhaseSwitcher)\nend\nThis is necessary because you're out of the Season \"namespace\" in the spec file. You could of course go into it by setting this up like this:\nrequire 'spec_helper'\n\nmodule Season\n  describe PhaseSwitcher do\n# ...\nHowever, I strongly advise not to do it! Season is not a module but a class and the PhaseSwitcher class not set up to be within the Season namespace. If it would, it would look like this:\nmodule Season\n  class PhaseSwitcher\nHowever, with Rails \ud83d\udca9 autoloading stuff, you'll run into troubles with this anyways \ud83d\ude09\nOnce you got the spec files, namespaces, etc. sorted out, let me know how I can help with the tests themselves.", "in_reply_to_id": 116111384}