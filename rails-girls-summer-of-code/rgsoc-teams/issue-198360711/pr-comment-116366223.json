{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/116366223", "pull_request_review_id": 37986723, "id": 116366223, "diff_hunk": "@@ -4,32 +4,61 @@\n context 'when switching phases' do\n   subject { Season.current }\n \n-  describe '#fake_application_phase' do\n-    it 'timeshifts the application phase to today' do\n-      Timecop.travel(Season.current.applications_close_at - 1.month) do\n-        Season::PhaseSwitcher.fake_application_phase\n-        expect(subject).to be_application_period\n+  describe 'destined' do\n+\n+    it 'sends the params to a phase setting method' do\n+      phase = 'fake_application_phase'\n+      Season::PhaseSwitcher.destined(phase)\n+      expect(subject).to_not be_nil\n+    end\n+\n+    context 'when directed to the #fake_application_phase' do\n+      it 'sets date range so that the season is open for application submissions' do\n+        phase = 'fake_application_phase'\n+        Timecop.travel(Season.current.applications_close_at - 1.month) do\n+          Season::PhaseSwitcher.destined(phase)\n+          expect(subject).to_not be_nil\n+          expect(subject).to be_application_period\n+        end\n       end\n     end\n-  end\n \n-  describe '#fake_coding_phase' do\n-    it 'timeshifts the coding phase to today' do\n-      Timecop.travel(Season.current.ends_at - 1.week) do\n-        Season::PhaseSwitcher.fake_coding_phase\n-        expect(subject).to be_started\n+    context 'when directed to the #fake_coding_phase' do\n+      it 'sets dates so that the summer of code is currently happening' do\n+        phase = 'fake_coding_phase'\n+        Timecop.travel(Season.current.ends_at - 1.week) do", "path": "spec/models/season/phase_switcher_spec.rb", "position": null, "original_position": 37, "commit_id": "4c120f41f14b541cf49d9fc05bb70c5382c8ba91", "original_commit_id": "6053436616a8e6257c1e0d6427b29a845dd18e40", "user": {"login": "F3PiX", "id": 6314687, "avatar_url": "https://avatars1.githubusercontent.com/u/6314687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F3PiX", "html_url": "https://github.com/F3PiX", "followers_url": "https://api.github.com/users/F3PiX/followers", "following_url": "https://api.github.com/users/F3PiX/following{/other_user}", "gists_url": "https://api.github.com/users/F3PiX/gists{/gist_id}", "starred_url": "https://api.github.com/users/F3PiX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F3PiX/subscriptions", "organizations_url": "https://api.github.com/users/F3PiX/orgs", "repos_url": "https://api.github.com/users/F3PiX/repos", "events_url": "https://api.github.com/users/F3PiX/events{/privacy}", "received_events_url": "https://api.github.com/users/F3PiX/received_events", "type": "User", "site_admin": false}, "body": "That made all the difference. \ud83d\ude48 \r\nSecond try,  to only test the public interface. To understand what is happening, I needed to work on a lower abstraction level than your instructions. I can change that later, unless you are tired of it...\r\nThe `expect(Season).to receive(:current).and_return(season)`did not want to return `season`, so I just added a var. \r\nWhat I tried to accomplish: see if the season receives the call with the phase, by checking roughly if something in the output changed. \r\nAnd now I realised why I added the Timecop: when the test run during the same phase as the fake-phase. I solved it not by adding a test in another phase. \r\nwdyt?\r\n  \r\n \r\n ", "created_at": "2017-05-13T19:55:43Z", "updated_at": "2017-05-14T21:21:53Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/585#discussion_r116366223", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/585", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/116366223"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/585#discussion_r116366223"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/585"}}, "body_html": "<p>That made all the difference. <g-emoji class=\"g-emoji\" alias=\"see_no_evil\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f648.png\">\ud83d\ude48</g-emoji><br>\nSecond try,  to only test the public interface. To understand what is happening, I needed to work on a lower abstraction level than your instructions. I can change that later, unless you are tired of it...<br>\nThe <code>expect(Season).to receive(:current).and_return(season)</code>did not want to return <code>season</code>, so I just added a var.<br>\nWhat I tried to accomplish: see if the season receives the call with the phase, by checking roughly if something in the output changed.<br>\nAnd now I realised why I added the Timecop: when the test run during the same phase as the fake-phase. I solved it not by adding a test in another phase.<br>\nwdyt?</p>", "body_text": "That made all the difference. \ud83d\ude48\nSecond try,  to only test the public interface. To understand what is happening, I needed to work on a lower abstraction level than your instructions. I can change that later, unless you are tired of it...\nThe expect(Season).to receive(:current).and_return(season)did not want to return season, so I just added a var.\nWhat I tried to accomplish: see if the season receives the call with the phase, by checking roughly if something in the output changed.\nAnd now I realised why I added the Timecop: when the test run during the same phase as the fake-phase. I solved it not by adding a test in another phase.\nwdyt?", "in_reply_to_id": 116111384}