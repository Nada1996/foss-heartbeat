{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/116388913", "pull_request_review_id": 38006702, "id": 116388913, "diff_hunk": "@@ -1,44 +1,60 @@\n+# frozen_string_literal: true\n+\n class Season::PhaseSwitcher\n \n+  PHASES = %i(\n+    fake_proposals_phase\n+    fake_application_phase\n+    fake_coding_phase\n+    back_to_reality\n+    ).freeze\n+\n   def self.season\n     Season.current\n   end\n \n+  def self.destined(phase)\n+    raise ArgumentError.new(\"#{phase} is not a valid phase\") unless phase.in? PHASES\n+    self.public_send(phase)\n+  end\n+\n+  private", "path": "app/models/season/phase_switcher.rb", "position": null, "original_position": 21, "commit_id": "4c120f41f14b541cf49d9fc05bb70c5382c8ba91", "original_commit_id": "021a433ee24bcbde6703dc0175c0f3070ed713ce", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "body": "Since you're only defining methods on `self` here and use `public_send` to invoke them, `private` does not have any effect here. I'd vote to either really make things private or just remove it in order to not irritate future developers.\r\n\r\nIf you decide to make things private and only expose the `destined` method to the outer world *(which would make sense, since it's the only method that get's tested and it's the only thing invoked from outside)*, you need to \"open up\" the class. This looks like this:\r\n```ruby\r\nclass Season::PhaseSwitcher\r\n  PHASES = %i(\r\n    fake_proposals_phase\r\n    fake_application_phase\r\n    fake_coding_phase\r\n    back_to_reality\r\n  ).freeze\r\n\r\n  class << self\r\n    def destined(phase)\r\n      raise ArgumentError.new(\"#{phase} is not a valid phase\") unless phase.in? PHASES\r\n      send(phase)\r\n    end\r\n\r\n    private\r\n\r\n    def season\r\n      Season.current\r\n    end\r\n\r\n    def fake_coding_phase\r\n      season.update(\r\n        starts_at: 6.weeks.ago,\r\n        ends_at: 6.weeks.from_now,\r\n        applications_open_at: 4.months.ago,\r\n        applications_close_at: 3.months.ago,\r\n        acceptance_notification_at: 2.months.ago\r\n      )\r\n    end\r\n\r\n    def fake_proposals_phase\r\n      season.update(\r\n        starts_at: 6.months.from_now,\r\n        ends_at: 9.months.from_now,\r\n        applications_open_at: 3.months.from_now,\r\n        applications_close_at: 4.months.from_now,\r\n        acceptance_notification_at: 5.months.from_now,\r\n        project_proposals_open_at: 4.weeks.ago,\r\n        project_proposals_close_at: 4.weeks.from_now\r\n      )\r\n    end\r\n\r\n    def fake_application_phase\r\n      season.update(\r\n        starts_at: 2.months.from_now,\r\n        ends_at: 5.months.from_now,\r\n        applications_open_at: 2.weeks.ago,\r\n        applications_close_at: 2.weeks.from_now,\r\n        acceptance_notification_at: 6.weeks.from_now\r\n      )\r\n    end\r\n\r\n    def back_to_reality\r\n      this_year = Date.today.year\r\n      season.update(\r\n        name: this_year,\r\n        starts_at: Time.utc(this_year, *Season::SUMMER_OPEN),\r\n        ends_at: Time.utc(this_year, *Season::SUMMER_CLOSE),\r\n        applications_open_at: Time.utc(this_year, *Season::APPL_OPEN),\r\n        applications_close_at: Time.utc(this_year, *Season::APPL_CLOSE),\r\n        acceptance_notification_at: Time.utc(this_year, *Season::APPL_LETTER),\r\n        project_proposals_open_at: Time.utc(this_year-1, *Season::PROJECTS_OPEN),\r\n        project_proposals_close_at: Time.utc(this_year, *Season::PROJECTS_CLOSE),\r\n      )\r\n    end\r\n  end\r\nend\r\n```", "created_at": "2017-05-14T19:32:54Z", "updated_at": "2017-05-14T21:26:48Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/585#discussion_r116388913", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/585", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/116388913"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/585#discussion_r116388913"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/585"}}, "body_html": "<p>Since you're only defining methods on <code>self</code> here and use <code>public_send</code> to invoke them, <code>private</code> does not have any effect here. I'd vote to either really make things private or just remove it in order to not irritate future developers.</p>\n<p>If you decide to make things private and only expose the <code>destined</code> method to the outer world <em>(which would make sense, since it's the only method that get's tested and it's the only thing invoked from outside)</em>, you need to \"open up\" the class. This looks like this:</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Season::PhaseSwitcher</span>\n  <span class=\"pl-c1\">PHASES</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">%i(</span>\n<span class=\"pl-c1\">    fake_proposals_phase</span>\n<span class=\"pl-c1\">    fake_application_phase</span>\n<span class=\"pl-c1\">    fake_coding_phase</span>\n<span class=\"pl-c1\">    back_to_reality</span>\n<span class=\"pl-c1\">  )</span>.freeze\n\n  <span class=\"pl-k\">class</span> <span class=\"pl-en\"><span class=\"pl-smi\">&lt;&lt; self</span></span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">destined</span>(<span class=\"pl-smi\">phase</span>)\n      <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">ArgumentError</span>.<span class=\"pl-k\">new</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pse\">#{</span><span class=\"pl-s1\">phase</span><span class=\"pl-pse\">}</span> is not a valid phase<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">unless</span> phase.in? <span class=\"pl-c1\">PHASES</span>\n      send(phase)\n    <span class=\"pl-k\">end</span>\n\n    <span class=\"pl-k\">private</span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">season</span>\n      <span class=\"pl-c1\">Season</span>.current\n    <span class=\"pl-k\">end</span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">fake_coding_phase</span>\n      season.update(\n        <span class=\"pl-c1\">starts_at:</span> <span class=\"pl-c1\">6</span>.weeks.ago,\n        <span class=\"pl-c1\">ends_at:</span> <span class=\"pl-c1\">6</span>.weeks.from_now,\n        <span class=\"pl-c1\">applications_open_at:</span> <span class=\"pl-c1\">4</span>.months.ago,\n        <span class=\"pl-c1\">applications_close_at:</span> <span class=\"pl-c1\">3</span>.months.ago,\n        <span class=\"pl-c1\">acceptance_notification_at:</span> <span class=\"pl-c1\">2</span>.months.ago\n      )\n    <span class=\"pl-k\">end</span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">fake_proposals_phase</span>\n      season.update(\n        <span class=\"pl-c1\">starts_at:</span> <span class=\"pl-c1\">6</span>.months.from_now,\n        <span class=\"pl-c1\">ends_at:</span> <span class=\"pl-c1\">9</span>.months.from_now,\n        <span class=\"pl-c1\">applications_open_at:</span> <span class=\"pl-c1\">3</span>.months.from_now,\n        <span class=\"pl-c1\">applications_close_at:</span> <span class=\"pl-c1\">4</span>.months.from_now,\n        <span class=\"pl-c1\">acceptance_notification_at:</span> <span class=\"pl-c1\">5</span>.months.from_now,\n        <span class=\"pl-c1\">project_proposals_open_at:</span> <span class=\"pl-c1\">4</span>.weeks.ago,\n        <span class=\"pl-c1\">project_proposals_close_at:</span> <span class=\"pl-c1\">4</span>.weeks.from_now\n      )\n    <span class=\"pl-k\">end</span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">fake_application_phase</span>\n      season.update(\n        <span class=\"pl-c1\">starts_at:</span> <span class=\"pl-c1\">2</span>.months.from_now,\n        <span class=\"pl-c1\">ends_at:</span> <span class=\"pl-c1\">5</span>.months.from_now,\n        <span class=\"pl-c1\">applications_open_at:</span> <span class=\"pl-c1\">2</span>.weeks.ago,\n        <span class=\"pl-c1\">applications_close_at:</span> <span class=\"pl-c1\">2</span>.weeks.from_now,\n        <span class=\"pl-c1\">acceptance_notification_at:</span> <span class=\"pl-c1\">6</span>.weeks.from_now\n      )\n    <span class=\"pl-k\">end</span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">back_to_reality</span>\n      this_year <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Date</span>.today.year\n      season.update(\n        <span class=\"pl-c1\">name:</span> this_year,\n        <span class=\"pl-c1\">starts_at:</span> <span class=\"pl-c1\">Time</span>.utc(this_year, <span class=\"pl-k\">*</span><span class=\"pl-c1\">Season</span>::<span class=\"pl-c1\">SUMMER_OPEN</span>),\n        <span class=\"pl-c1\">ends_at:</span> <span class=\"pl-c1\">Time</span>.utc(this_year, <span class=\"pl-k\">*</span><span class=\"pl-c1\">Season</span>::<span class=\"pl-c1\">SUMMER_CLOSE</span>),\n        <span class=\"pl-c1\">applications_open_at:</span> <span class=\"pl-c1\">Time</span>.utc(this_year, <span class=\"pl-k\">*</span><span class=\"pl-c1\">Season</span>::<span class=\"pl-c1\">APPL_OPEN</span>),\n        <span class=\"pl-c1\">applications_close_at:</span> <span class=\"pl-c1\">Time</span>.utc(this_year, <span class=\"pl-k\">*</span><span class=\"pl-c1\">Season</span>::<span class=\"pl-c1\">APPL_CLOSE</span>),\n        <span class=\"pl-c1\">acceptance_notification_at:</span> <span class=\"pl-c1\">Time</span>.utc(this_year, <span class=\"pl-k\">*</span><span class=\"pl-c1\">Season</span>::<span class=\"pl-c1\">APPL_LETTER</span>),\n        <span class=\"pl-c1\">project_proposals_open_at:</span> <span class=\"pl-c1\">Time</span>.utc(this_year<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-k\">*</span><span class=\"pl-c1\">Season</span>::<span class=\"pl-c1\">PROJECTS_OPEN</span>),\n        <span class=\"pl-c1\">project_proposals_close_at:</span> <span class=\"pl-c1\">Time</span>.utc(this_year, <span class=\"pl-k\">*</span><span class=\"pl-c1\">Season</span>::<span class=\"pl-c1\">PROJECTS_CLOSE</span>),\n      )\n    <span class=\"pl-k\">end</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre></div>", "body_text": "Since you're only defining methods on self here and use public_send to invoke them, private does not have any effect here. I'd vote to either really make things private or just remove it in order to not irritate future developers.\nIf you decide to make things private and only expose the destined method to the outer world (which would make sense, since it's the only method that get's tested and it's the only thing invoked from outside), you need to \"open up\" the class. This looks like this:\nclass Season::PhaseSwitcher\n  PHASES = %i(\n    fake_proposals_phase\n    fake_application_phase\n    fake_coding_phase\n    back_to_reality\n  ).freeze\n\n  class << self\n    def destined(phase)\n      raise ArgumentError.new(\"#{phase} is not a valid phase\") unless phase.in? PHASES\n      send(phase)\n    end\n\n    private\n\n    def season\n      Season.current\n    end\n\n    def fake_coding_phase\n      season.update(\n        starts_at: 6.weeks.ago,\n        ends_at: 6.weeks.from_now,\n        applications_open_at: 4.months.ago,\n        applications_close_at: 3.months.ago,\n        acceptance_notification_at: 2.months.ago\n      )\n    end\n\n    def fake_proposals_phase\n      season.update(\n        starts_at: 6.months.from_now,\n        ends_at: 9.months.from_now,\n        applications_open_at: 3.months.from_now,\n        applications_close_at: 4.months.from_now,\n        acceptance_notification_at: 5.months.from_now,\n        project_proposals_open_at: 4.weeks.ago,\n        project_proposals_close_at: 4.weeks.from_now\n      )\n    end\n\n    def fake_application_phase\n      season.update(\n        starts_at: 2.months.from_now,\n        ends_at: 5.months.from_now,\n        applications_open_at: 2.weeks.ago,\n        applications_close_at: 2.weeks.from_now,\n        acceptance_notification_at: 6.weeks.from_now\n      )\n    end\n\n    def back_to_reality\n      this_year = Date.today.year\n      season.update(\n        name: this_year,\n        starts_at: Time.utc(this_year, *Season::SUMMER_OPEN),\n        ends_at: Time.utc(this_year, *Season::SUMMER_CLOSE),\n        applications_open_at: Time.utc(this_year, *Season::APPL_OPEN),\n        applications_close_at: Time.utc(this_year, *Season::APPL_CLOSE),\n        acceptance_notification_at: Time.utc(this_year, *Season::APPL_LETTER),\n        project_proposals_open_at: Time.utc(this_year-1, *Season::PROJECTS_OPEN),\n        project_proposals_close_at: Time.utc(this_year, *Season::PROJECTS_CLOSE),\n      )\n    end\n  end\nend"}