{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/116389300", "pull_request_review_id": 38006702, "id": 116389300, "diff_hunk": "@@ -1,35 +1,43 @@\n require 'spec_helper'\n \n+describe Season::PhaseSwitcher do\n \n-context 'when switching phases' do\n-  subject { Season.current }\n+  it \"is available as described class\" do\n+    expect(described_class).to eq Season::PhaseSwitcher\n+  end\n+\n+  context 'when switching phases' do\n+    season = Season.current\n \n-  describe '#fake_application_phase' do\n-    it 'timeshifts the application phase to today' do\n-      Timecop.travel(Season.current.applications_close_at - 1.month) do\n-        Season::PhaseSwitcher.fake_application_phase\n-        expect(subject).to be_application_period\n+    context 'when the input is valid' do\n+      it 'gets called on the season object' do\n+        phase = :fake_application_phase\n+        described_class.destined(phase)\n+        season.reload\n+        expect(season).to be_application_period\n       end\n-    end\n-  end\n \n-  describe '#fake_coding_phase' do\n-    it 'timeshifts the coding phase to today' do\n-      Timecop.travel(Season.current.ends_at - 1.week) do\n-        Season::PhaseSwitcher.fake_coding_phase\n-        expect(subject).to be_started\n+      it 'changes also when real time happens to be within application_period' do\n+        phase = :fake_proposals_phase\n+        described_class.destined(phase)\n+        season.reload\n+        expect(season).not_to be_application_period\n       end\n     end\n-  end\n \n-  describe '#fake_proposals_phase' do\n-    it 'timeshifts the proposal period to today' do\n-      Timecop.travel(Season.current.project_proposals_close_at - 2.weeks) do\n-        fake_time = Time.now #as returned by Timecop\n-        Season::PhaseSwitcher.fake_proposals_phase\n-        expect(subject.project_proposals_open_at).to be < fake_time\n-        expect(subject.project_proposals_close_at).to be > fake_time\n+    context 'when the input is malicious' do\n+      phase = :bad_intentions\n+\n+      it 'raises an error when it receives a non-whitelisted phase' do\n+        expect {\n+          described_class.destined(phase)\n+        }.to raise_error(ArgumentError)\n+      end\n+      it 'does not change the season dates' do", "path": "spec/models/season/phase_switcher_spec.rb", "position": null, "original_position": 58, "commit_id": "4c120f41f14b541cf49d9fc05bb70c5382c8ba91", "original_commit_id": "021a433ee24bcbde6703dc0175c0f3070ed713ce", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "body": "I'm not a huge fan of this `rescue` pattern. How about using a chained expectation instead?\r\nShould look something along the lines of this if I recall correctly:\r\n```ruby\r\nRSpec::Matchers.define_negated_matcher :not_change, :change\r\n\r\nexpect { described_class.destined(phase) }\r\n  .to raise_error(ArgumentError)\r\n  .and not_change { Season.current.reload }\r\n```", "created_at": "2017-05-14T19:52:46Z", "updated_at": "2017-05-14T21:21:53Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/585#discussion_r116389300", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/585", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/116389300"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/585#discussion_r116389300"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/585"}}, "body_html": "<p>I'm not a huge fan of this <code>rescue</code> pattern. How about using a chained expectation instead?<br>\nShould look something along the lines of this if I recall correctly:</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-c1\">RSpec</span>::<span class=\"pl-c1\">Matchers</span>.define_negated_matcher <span class=\"pl-c1\">:not_change</span>, <span class=\"pl-c1\">:change</span>\n\nexpect { described_class.destined(phase) }\n  .to raise_error(<span class=\"pl-c1\">ArgumentError</span>)\n  .and not_change { <span class=\"pl-c1\">Season</span>.current.reload }</pre></div>", "body_text": "I'm not a huge fan of this rescue pattern. How about using a chained expectation instead?\nShould look something along the lines of this if I recall correctly:\nRSpec::Matchers.define_negated_matcher :not_change, :change\n\nexpect { described_class.destined(phase) }\n  .to raise_error(ArgumentError)\n  .and not_change { Season.current.reload }"}