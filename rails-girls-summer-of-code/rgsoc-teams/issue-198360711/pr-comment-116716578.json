{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/116716578", "pull_request_review_id": 38357975, "id": 116716578, "diff_hunk": "@@ -1,44 +1,60 @@\n+# frozen_string_literal: true\n+\n class Season::PhaseSwitcher\n \n+  PHASES = %i(\n+    fake_proposals_phase\n+    fake_application_phase\n+    fake_coding_phase\n+    back_to_reality\n+    ).freeze\n+\n   def self.season\n     Season.current\n   end\n \n+  def self.destined(phase)\n+    raise ArgumentError.new(\"#{phase} is not a valid phase\") unless phase.in? PHASES\n+    self.public_send(phase)\n+  end\n+\n+  private", "path": "app/models/season/phase_switcher.rb", "position": null, "original_position": 21, "commit_id": "4c120f41f14b541cf49d9fc05bb70c5382c8ba91", "original_commit_id": "021a433ee24bcbde6703dc0175c0f3070ed713ce", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "body": "It's a classic. Katrina Owen has given whole talks about refactoring a case statement :v:\r\n\r\nAnd yes, for public class methods it's effectively the same. However, if you want to have private ones, only using `private` is not enough, if I recall correctly, there would be some macros like `def_private_method` or some like this...\r\nTherefore when I want to have private methods (basically all of the time) I use `class << self`.\r\n\r\nAnd for service objects: they can be anything as long as you call them \"service object\". Oftentimes, in a Rails context, the may for instance look like this:\r\n```ruby\r\nclass Service\r\n  def initialize(val:)\r\n    @val = val\r\n  end\r\n\r\n  def call\r\n    perform_complex_logic\r\n  end\r\n\r\n  private\r\n\r\n  attr_reader :val\r\n\r\n  def perform_complex_logic\r\n    # do stuff\r\n  end\r\nend\r\n```\r\n\r\nBut they can essentially just be anything that suits your business logic needs \ud83d\ude09 ", "created_at": "2017-05-16T11:20:53Z", "updated_at": "2017-05-16T11:20:53Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/585#discussion_r116716578", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/585", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/116716578"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/585#discussion_r116716578"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/585"}}, "body_html": "<p>It's a classic. Katrina Owen has given whole talks about refactoring a case statement <g-emoji class=\"g-emoji\" alias=\"v\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/270c.png\">\u270c\ufe0f</g-emoji></p>\n<p>And yes, for public class methods it's effectively the same. However, if you want to have private ones, only using <code>private</code> is not enough, if I recall correctly, there would be some macros like <code>def_private_method</code> or some like this...<br>\nTherefore when I want to have private methods (basically all of the time) I use <code>class &lt;&lt; self</code>.</p>\n<p>And for service objects: they can be anything as long as you call them \"service object\". Oftentimes, in a Rails context, the may for instance look like this:</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Service</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">initialize</span>(<span class=\"pl-c1\">val:</span>)\n    <span class=\"pl-smi\">@val</span> <span class=\"pl-k\">=</span> val\n  <span class=\"pl-k\">end</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">call</span>\n    perform_complex_logic\n  <span class=\"pl-k\">end</span>\n\n  <span class=\"pl-k\">private</span>\n\n  <span class=\"pl-k\">attr_reader</span> <span class=\"pl-c1\">:val</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">perform_complex_logic</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> do stuff</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre></div>\n<p>But they can essentially just be anything that suits your business logic needs <g-emoji class=\"g-emoji\" alias=\"wink\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f609.png\">\ud83d\ude09</g-emoji></p>", "body_text": "It's a classic. Katrina Owen has given whole talks about refactoring a case statement \u270c\ufe0f\nAnd yes, for public class methods it's effectively the same. However, if you want to have private ones, only using private is not enough, if I recall correctly, there would be some macros like def_private_method or some like this...\nTherefore when I want to have private methods (basically all of the time) I use class << self.\nAnd for service objects: they can be anything as long as you call them \"service object\". Oftentimes, in a Rails context, the may for instance look like this:\nclass Service\n  def initialize(val:)\n    @val = val\n  end\n\n  def call\n    perform_complex_logic\n  end\n\n  private\n\n  attr_reader :val\n\n  def perform_complex_logic\n    # do stuff\n  end\nend\nBut they can essentially just be anything that suits your business logic needs \ud83d\ude09", "in_reply_to_id": 116388913}