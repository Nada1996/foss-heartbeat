{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/97411886", "pull_request_review_id": 18016151, "id": 97411886, "diff_hunk": "@@ -0,0 +1,118 @@\n+module Mentor\n+  class Application\n+    include ActiveModel::Model\n+\n+    DB = ActiveRecord::Base.connection\n+\n+    attr_accessor :id, :team_name\n+    attr_accessor :project_id, :project_name\n+    attr_accessor :project_plan, :why_selected_project\n+    attr_accessor :student0, :student1\n+    attr_accessor :first_choice\n+\n+    def choice\n+      first_choice ? 1 : 2\n+    end\n+\n+    def student0=(attrs)\n+      attrs     = JSON.parse(attrs).instance_eval(&studentize)", "path": "app/models/mentor/application.rb", "position": null, "original_position": 18, "commit_id": "9f96071c5129e24770ccd4edceca73ec9202c483", "original_commit_id": "7d7f02cf351e87252d7a810eafb086dcf2bd1571", "user": {"login": "carpodaster", "id": 164400, "avatar_url": "https://avatars2.githubusercontent.com/u/164400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carpodaster", "html_url": "https://github.com/carpodaster", "followers_url": "https://api.github.com/users/carpodaster/followers", "following_url": "https://api.github.com/users/carpodaster/following{/other_user}", "gists_url": "https://api.github.com/users/carpodaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/carpodaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carpodaster/subscriptions", "organizations_url": "https://api.github.com/users/carpodaster/orgs", "repos_url": "https://api.github.com/users/carpodaster/repos", "events_url": "https://api.github.com/users/carpodaster/events{/privacy}", "received_events_url": "https://api.github.com/users/carpodaster/received_events", "type": "User", "site_admin": false}, "body": "Holy :cow:  \u2013 very elegant!\r\n\r\nIt took me some time to wrap my mind around it, though, what with the 3 levels of indirection. Do you see a way to rewrite this in a less inside-out object modification manner?\r\n\r\nDoes this work:\r\n\r\n```ruby\r\ndef student1=(attrs)\r\n  attrs = JSON.parse(studentize(attrs))\r\nend\r\n# \u2026\r\ndef studentize(attrs)\r\n  attrs.keys.each{ |k| attrs[k.gsub(/student(0|1)_application_/, '')] = attrs.delete(k) } }\r\nend\r\n```\r\n\r\nBut that still modifies the passed `attrs` value, no? It would rather work with `#dup`s. Or is the mutation a desired/required effect?", "created_at": "2017-01-23T20:47:19Z", "updated_at": "2017-01-30T22:07:27Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/620#discussion_r97411886", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/620", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/97411886"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/620#discussion_r97411886"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/620"}}, "body_html": "<p>Holy <g-emoji class=\"g-emoji\" alias=\"cow\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f42e.png\">\ud83d\udc2e</g-emoji>  \u2013 very elegant!</p>\n<p>It took me some time to wrap my mind around it, though, what with the 3 levels of indirection. Do you see a way to rewrite this in a less inside-out object modification manner?</p>\n<p>Does this work:</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">student1=</span>(<span class=\"pl-smi\">attrs</span>)\n  attrs <span class=\"pl-k\">=</span> <span class=\"pl-c1\">JSON</span>.parse(studentize(attrs))\n<span class=\"pl-k\">end</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> \u2026</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">studentize</span>(<span class=\"pl-smi\">attrs</span>)\n  attrs.keys.each{ |<span class=\"pl-smi\">k</span>| attrs[k.<span class=\"pl-c1\">gsub</span>(<span class=\"pl-sr\">/student<span class=\"pl-sr\">(0|1)</span>_application_/</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>)] <span class=\"pl-k\">=</span> attrs.delete(k) } }\n<span class=\"pl-k\">end</span></pre></div>\n<p>But that still modifies the passed <code>attrs</code> value, no? It would rather work with <code>#dup</code>s. Or is the mutation a desired/required effect?</p>", "body_text": "Holy \ud83d\udc2e  \u2013 very elegant!\nIt took me some time to wrap my mind around it, though, what with the 3 levels of indirection. Do you see a way to rewrite this in a less inside-out object modification manner?\nDoes this work:\ndef student1=(attrs)\n  attrs = JSON.parse(studentize(attrs))\nend\n# \u2026\ndef studentize(attrs)\n  attrs.keys.each{ |k| attrs[k.gsub(/student(0|1)_application_/, '')] = attrs.delete(k) } }\nend\nBut that still modifies the passed attrs value, no? It would rather work with #dups. Or is the mutation a desired/required effect?"}