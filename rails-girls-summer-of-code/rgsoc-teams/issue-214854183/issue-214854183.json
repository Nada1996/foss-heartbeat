{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/696", "repository_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams", "labels_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/696/labels{/name}", "comments_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/696/comments", "events_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/696/events", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/696", "id": 214854183, "number": 696, "title": "Service / task to flag applications for selection", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2017-03-16T22:15:06Z", "updated_at": "2017-03-24T13:46:31Z", "closed_at": "2017-03-24T09:16:30Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/696", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/696", "diff_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/696.diff", "patch_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/696.patch"}, "body_html": "<p>Hey <a href=\"https://github.com/mkalininait\" class=\"user-mention\">@mkalininait</a>, this is the script you described in <a href=\"https://github.com/rails-girls-summer-of-code/selection_process/issues/47\">selection#47</a>. Due to the <em>\"freeness\"</em> of the application fields, the matching is rather <em>\"fuzzy\"</em>. It will for instance flag a team as <code>remote</code> if the students set these two locations:</p>\n<pre><code>[\"New York, United States\", \"Brooklyn, New York \"]\n</code></pre>\n<p>The best trade off for me was to match the first and last word, no matter now they are separated. So some false matches will still be in.</p>\n<p>Same goes for gender.</p>\n<p>I ran it locally on a dump on the current production DB and found the results quite ok. It for instance also flags teams without locations as <code>remote</code> - which is fine in my opinion.</p>\n<p>Codewise: I know the usage of instance vars within the <code>find_each</code> looks kind of nasty for people having seen the light of Elixir. But I think it's still an okish approach for a service object only exposing a single method to the outside.</p>", "body_text": "Hey @mkalininait, this is the script you described in selection#47. Due to the \"freeness\" of the application fields, the matching is rather \"fuzzy\". It will for instance flag a team as remote if the students set these two locations:\n[\"New York, United States\", \"Brooklyn, New York \"]\n\nThe best trade off for me was to match the first and last word, no matter now they are separated. So some false matches will still be in.\nSame goes for gender.\nI ran it locally on a dump on the current production DB and found the results quite ok. It for instance also flags teams without locations as remote - which is fine in my opinion.\nCodewise: I know the usage of instance vars within the find_each looks kind of nasty for people having seen the light of Elixir. But I think it's still an okish approach for a service object only exposing a single method to the outside.", "body": "Hey @mkalininait, this is the script you described in [selection#47](https://github.com/rails-girls-summer-of-code/selection_process/issues/47). Due to the _\"freeness\"_ of the application fields, the matching is rather _\"fuzzy\"_. It will for instance flag a team as `remote` if the students set these two locations:\r\n```\r\n[\"New York, United States\", \"Brooklyn, New York \"]\r\n```\r\nThe best trade off for me was to match the first and last word, no matter now they are separated. So some false matches will still be in.\r\n\r\nSame goes for gender.\r\n\r\nI ran it locally on a dump on the current production DB and found the results quite ok. It for instance also flags teams without locations as `remote` - which is fine in my opinion.\r\n\r\nCodewise: I know the usage of instance vars within the `find_each` looks kind of nasty for people having seen the light of Elixir. But I think it's still an okish approach for a service object only exposing a single method to the outside."}