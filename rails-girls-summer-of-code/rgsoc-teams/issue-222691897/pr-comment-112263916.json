{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/112263916", "pull_request_review_id": 33565125, "id": 112263916, "diff_hunk": "@@ -0,0 +1,13 @@\n+  #comments\n+    h2 Comments\n+\n+    - commentable.comments.each do |comment|\n+      hr(id=\"#{dom_id comment}\")\n+      h5 = \"#{ user_for_comment(comment) }, #{ l(comment.created_at, format: :short) }\".html_safe", "path": "app/views/comments/_comments.html.slim", "position": 6, "original_position": 6, "commit_id": "0acb889c03d54146c7c525b10cdcab985df8aee8", "original_commit_id": "468100ab410be6086e8f0b527960a941e39387c9", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "body": "Hm, maybe out of the scope of this PR, but I kinda don't like that we here first query for the comments and then **again** for the comment's user *(even though we in the end only want his or her name...)*. Do you think it would make sense to add something like a `comments_with_author` method to the concern used to make model commentable that would do a `includes(:user)`? One could then eventually also simplify the helper method used here a bit...", "created_at": "2017-04-19T17:24:29Z", "updated_at": "2017-04-22T10:37:28Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/742#discussion_r112263916", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/742", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/112263916"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/742#discussion_r112263916"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/742"}}, "body_html": "<p>Hm, maybe out of the scope of this PR, but I kinda don't like that we here first query for the comments and then <strong>again</strong> for the comment's user <em>(even though we in the end only want his or her name...)</em>. Do you think it would make sense to add something like a <code>comments_with_author</code> method to the concern used to make model commentable that would do a <code>includes(:user)</code>? One could then eventually also simplify the helper method used here a bit...</p>", "body_text": "Hm, maybe out of the scope of this PR, but I kinda don't like that we here first query for the comments and then again for the comment's user (even though we in the end only want his or her name...). Do you think it would make sense to add something like a comments_with_author method to the concern used to make model commentable that would do a includes(:user)? One could then eventually also simplify the helper method used here a bit..."}