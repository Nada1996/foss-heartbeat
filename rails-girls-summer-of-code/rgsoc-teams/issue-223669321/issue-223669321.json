{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/744", "repository_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams", "labels_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/744/labels{/name}", "comments_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/744/comments", "events_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/744/events", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/744", "id": 223669321, "number": 744, "title": "Simplify database config", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-04-23T21:38:55Z", "updated_at": "2017-11-11T09:06:13Z", "closed_at": "2017-05-01T10:29:07Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/744", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/744", "diff_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/744.diff", "patch_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/744.patch"}, "body_html": "<p>Looking at the configuration for the production and staging apps on Heroku, I found the current database config unnecessarily complicated. We do not provide a <code>database.yml</code> with a <code>production</code> section, so Heroku just creates a default one after each deploy. However, recent versions of Rails allow to specify the DB connection via a url <em>(which Heroku provides us)</em> - see e.g. the comment in a fresh Rails 5 app's <code>database.yml</code> file:</p>\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> On Heroku and other platform providers, you may have a full connection URL</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> available as an environment variable. For example:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>   DATABASE_URL=\"postgres://myuser:mypass@localhost/somedatabase\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> You can use this database configuration with:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>   production:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>     url: &lt;%= ENV['DATABASE_URL'] %&gt;</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span></span></pre></div>\n<p>When deploying the app with a <code>database.yml</code> file including an <code>production</code> section, Heroku skips creating a own one and uses this configuration. This will then allow us to have more specific settings, such as the pool size just specified globally for all environments, which is more transparent in my opinion. Rails 5 now also even suggests this in their default <code>database.yml</code>:</p>\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> The specified database role being used to connect to postgres.</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> To create additional roles in postgres see `$ createuser --help`.</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> When left blank, postgres will use the default role. This is</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> the same name as the operating system user that initialized the database.</span></pre></div>\n<p>However, feel free to close this PR if you think the old setup makes more sense, just wanted to propose this alternative <g-emoji class=\"g-emoji\" alias=\"v\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/270c.png\">\u270c\ufe0f</g-emoji></p>\n<p>PS: I adapted the Readme and <code>travis.yml</code> accordingly. There was a special <em>warning</em> section about Postgres on OSX - I could not verify this being an issue any more, so I removed it.</p>", "body_text": "Looking at the configuration for the production and staging apps on Heroku, I found the current database config unnecessarily complicated. We do not provide a database.yml with a production section, so Heroku just creates a default one after each deploy. However, recent versions of Rails allow to specify the DB connection via a url (which Heroku provides us) - see e.g. the comment in a fresh Rails 5 app's database.yml file:\n# On Heroku and other platform providers, you may have a full connection URL\n# available as an environment variable. For example:\n#\n#   DATABASE_URL=\"postgres://myuser:mypass@localhost/somedatabase\"\n#\n# You can use this database configuration with:\n#\n#   production:\n#     url: <%= ENV['DATABASE_URL'] %>\n#\nWhen deploying the app with a database.yml file including an production section, Heroku skips creating a own one and uses this configuration. This will then allow us to have more specific settings, such as the pool size just specified globally for all environments, which is more transparent in my opinion. Rails 5 now also even suggests this in their default database.yml:\n# The specified database role being used to connect to postgres.\n# To create additional roles in postgres see `$ createuser --help`.\n# When left blank, postgres will use the default role. This is\n# the same name as the operating system user that initialized the database.\nHowever, feel free to close this PR if you think the old setup makes more sense, just wanted to propose this alternative \u270c\ufe0f\nPS: I adapted the Readme and travis.yml accordingly. There was a special warning section about Postgres on OSX - I could not verify this being an issue any more, so I removed it.", "body": "Looking at the configuration for the production and staging apps on Heroku, I found the current database config unnecessarily complicated. We do not provide a `database.yml` with a `production` section, so Heroku just creates a default one after each deploy. However, recent versions of Rails allow to specify the DB connection via a url *(which Heroku provides us)* - see e.g. the comment in a fresh Rails 5 app's `database.yml` file:\r\n```yaml\r\n# On Heroku and other platform providers, you may have a full connection URL\r\n# available as an environment variable. For example:\r\n#\r\n#   DATABASE_URL=\"postgres://myuser:mypass@localhost/somedatabase\"\r\n#\r\n# You can use this database configuration with:\r\n#\r\n#   production:\r\n#     url: <%= ENV['DATABASE_URL'] %>\r\n#\r\n```\r\n\r\nWhen deploying the app with a `database.yml` file including an `production` section, Heroku skips creating a own one and uses this configuration. This will then allow us to have more specific settings, such as the pool size just specified globally for all environments, which is more transparent in my opinion. Rails 5 now also even suggests this in their default `database.yml`:\r\n\r\n```yaml\r\n# The specified database role being used to connect to postgres.\r\n# To create additional roles in postgres see `$ createuser --help`.\r\n# When left blank, postgres will use the default role. This is\r\n# the same name as the operating system user that initialized the database.\r\n```\r\n\r\nHowever, feel free to close this PR if you think the old setup makes more sense, just wanted to propose this alternative :v:\r\n\r\nPS: I adapted the Readme and `travis.yml` accordingly. There was a special *warning* section about Postgres on OSX - I could not verify this being an issue any more, so I removed it.\r\n"}