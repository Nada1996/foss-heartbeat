{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/745", "repository_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams", "labels_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/745/labels{/name}", "comments_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/745/comments", "events_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/745/events", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/745", "id": 228540716, "number": 745, "title": "Use expected values to improve strictness computation", "user": {"login": "neumanrq", "id": 3685123, "avatar_url": "https://avatars2.githubusercontent.com/u/3685123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neumanrq", "html_url": "https://github.com/neumanrq", "followers_url": "https://api.github.com/users/neumanrq/followers", "following_url": "https://api.github.com/users/neumanrq/following{/other_user}", "gists_url": "https://api.github.com/users/neumanrq/gists{/gist_id}", "starred_url": "https://api.github.com/users/neumanrq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neumanrq/subscriptions", "organizations_url": "https://api.github.com/users/neumanrq/orgs", "repos_url": "https://api.github.com/users/neumanrq/repos", "events_url": "https://api.github.com/users/neumanrq/events{/privacy}", "received_events_url": "https://api.github.com/users/neumanrq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-05-14T13:08:52Z", "updated_at": "2017-09-11T18:34:50Z", "closed_at": "2017-09-11T18:34:16Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/745", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/745", "diff_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/745.diff", "patch_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/745.patch"}, "body_html": "<p>When <a href=\"https://github.com/carpodaster\" class=\"user-mention\">@carpodaster</a>  and me have proposed the <a href=\"https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/741\">first version of reviewer strictness computation</a> I made a mistake because of oversimplification. As <a href=\"https://github.com/mkalininait\" class=\"user-mention\">@mkalininait</a> correctly pointed out, our current formula gets slightly unfair when the amount of ratings is not equal for all reviewers.</p>\n<p>Because I was a bit confused at all I started formalizing our problem en d\u00e9tail <a href=\"https://github.com/neumanrq/fair_reviewers/blob/master/theory/index.pdf\">here</a>, where the new formula is taken from (It is the formula for <code>S^*</code>, currently Definiton 9 on page 5).</p>\n<p>The short version is: After merging this, the strictness will be computed by determining the expectation value for each reviewer and comparing it to the \"overall\" computation value, instead of a more simple comparison of \"amount of points assigned by reviewer A\" with \"amount points assigned by an average reviewer\".</p>\n<p>I'd love to take <a href=\"https://github.com/carpodaster\" class=\"user-mention\">@carpodaster</a> into account: Maybe we could pair on this during next week and check it against real data. Of course, everyone is invited to ask sceptical questions on this <g-emoji class=\"g-emoji\" alias=\"eyes\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f440.png\">\ud83d\udc40</g-emoji>  <g-emoji class=\"g-emoji\" alias=\"smile\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png\">\ud83d\ude04</g-emoji></p>", "body_text": "When @carpodaster  and me have proposed the first version of reviewer strictness computation I made a mistake because of oversimplification. As @mkalininait correctly pointed out, our current formula gets slightly unfair when the amount of ratings is not equal for all reviewers.\nBecause I was a bit confused at all I started formalizing our problem en d\u00e9tail here, where the new formula is taken from (It is the formula for S^*, currently Definiton 9 on page 5).\nThe short version is: After merging this, the strictness will be computed by determining the expectation value for each reviewer and comparing it to the \"overall\" computation value, instead of a more simple comparison of \"amount of points assigned by reviewer A\" with \"amount points assigned by an average reviewer\".\nI'd love to take @carpodaster into account: Maybe we could pair on this during next week and check it against real data. Of course, everyone is invited to ask sceptical questions on this \ud83d\udc40  \ud83d\ude04", "body": "When @carpodaster  and me have proposed the [first version of reviewer strictness computation](https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/741) I made a mistake because of oversimplification. As @mkalininait correctly pointed out, our current formula gets slightly unfair when the amount of ratings is not equal for all reviewers.\r\n\r\nBecause I was a bit confused at all I started formalizing our problem en d\u00e9tail [here](https://github.com/neumanrq/fair_reviewers/blob/master/theory/index.pdf), where the new formula is taken from (It is the formula for `S^*`, currently Definiton 9 on page 5).\r\n\r\nThe short version is: After merging this, the strictness will be computed by determining the expectation value for each reviewer and comparing it to the \"overall\" computation value, instead of a more simple comparison of \"amount of points assigned by reviewer A\" with \"amount points assigned by an average reviewer\". \r\n\r\nI'd love to take @carpodaster into account: Maybe we could pair on this during next week and check it against real data. Of course, everyone is invited to ask sceptical questions on this \ud83d\udc40  \ud83d\ude04 "}