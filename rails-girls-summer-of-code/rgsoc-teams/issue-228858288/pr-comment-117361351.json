{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/117361351", "pull_request_review_id": 39064385, "id": 117361351, "diff_hunk": "@@ -7,6 +7,22 @@\n   it { is_expected.to have_many(:attendees) }\n   it { is_expected.to validate_presence_of(:name) }\n   it { is_expected.to validate_presence_of(:round) }\n+  it { is_expected.to validate_presence_of(:starts_on) }\n+  it { is_expected.to validate_presence_of(:ends_on) }\n+\n+  describe 'it checks the chronological order of dates' do\n+    subject { FactoryGirl.build(:conference) }", "path": "spec/models/conference_spec.rb", "position": null, "original_position": 8, "commit_id": "feaebc7d62b276885c233762297245bcc6542673", "original_commit_id": "0bf907889b555355ad180c5d8a6a5be9f5b50281", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "body": "```ruby\r\nexpect(subject).not_to be_valid\r\n```\r\nwould generally be fine, if you can make sure that the error is not triggered from a completely different validation. So if doing it like this maybe also quickly check if the subject otherwise is valid\r\n\r\n```ruby\r\nsubject {\u00a0thing } \r\n\r\nit { is_expected.to be_valid }\r\n\r\n# more specs\r\n```\r\n", "created_at": "2017-05-18T21:43:18Z", "updated_at": "2017-05-19T14:23:45Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/747#discussion_r117361351", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/747", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/117361351"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/747#discussion_r117361351"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/747"}}, "body_html": "<div class=\"highlight highlight-source-ruby\"><pre>expect(subject).not_to be_valid</pre></div>\n<p>would generally be fine, if you can make sure that the error is not triggered from a completely different validation. So if doing it like this maybe also quickly check if the subject otherwise is valid</p>\n<div class=\"highlight highlight-source-ruby\"><pre>subject {\u00a0thing } \n\nit { is_expected.to be_valid }\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> more specs</span></pre></div>", "body_text": "expect(subject).not_to be_valid\nwould generally be fine, if you can make sure that the error is not triggered from a completely different validation. So if doing it like this maybe also quickly check if the subject otherwise is valid\nsubject {\u00a0thing } \n\nit { is_expected.to be_valid }\n\n# more specs", "in_reply_to_id": 116870181}