{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/119587392", "pull_request_review_id": 41477889, "id": 119587392, "diff_hunk": "@@ -0,0 +1,59 @@\n+require 'spec_helper'\n+\n+RSpec.describe DateRange do\n+\n+  describe '#dates' do\n+      let(:conference) { FactoryGirl.build_stubbed(:conference)}\n+    \n+    it 'creates a date range for calling Models' do\n+      expect(conference.dates).to be_an_instance_of DateRange\n+    end\n+  end\n+  \n+  describe '#compact' do\n+    let (:conference)  { FactoryGirl.build_stubbed(:conference) }\n+    subject { described_class.new(start_date: Date.parse('2015-12-31'), end_date: Date.parse('2015-12-31')) }", "path": "spec/models/date_range_spec.rb", "position": null, "original_position": 15, "commit_id": "4a2df11759069bd2507464bfbda8515466cdc3eb", "original_commit_id": "eadd69f85d996fe8d8a0e3de538862e958e6eeaa", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "body": "Just a matter of style, but I think the tests are more meaningful if the `subject` reflects the actual \"subject\" of all expectations. So in order to dry this up a bit and make it more expressive I'd suggest to switch it to be actually `compact`:\r\n\r\n```ruby\r\nlet(:start_date) {\u00a0Date.parse('2015-12-31') }\r\nlet(:end_date)   {\u00a0Date.parse('2015-12-31') }\r\n\r\nsubject {\u00a0described_class.new(start_date: start_date, end_date: end_date).compact }\r\n\r\n# etc.\r\n```\r\n\r\nAnd then, for different contexts, all you have to do is change the values for `starts_at` and `ends_at`:\r\n```ruby\r\ncontext 'when multiple dates in same month' do\r\n  let(:start_date) { Date.parse('2015-12-30') }\r\n  let(:end_date    { Date.parse('2015-12-31') }\r\n\r\n  it 'returns compact days' do\r\n    expect(subject).to eq ('30 - 31 Dec 2015')\r\n  end\r\nend\r\n```\r\n\r\nWhat do you think?", "created_at": "2017-06-01T11:16:15Z", "updated_at": "2017-06-04T12:40:34Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/748#discussion_r119587392", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/748", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/119587392"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/748#discussion_r119587392"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/748"}}, "body_html": "<p>Just a matter of style, but I think the tests are more meaningful if the <code>subject</code> reflects the actual \"subject\" of all expectations. So in order to dry this up a bit and make it more expressive I'd suggest to switch it to be actually <code>compact</code>:</p>\n<div class=\"highlight highlight-source-ruby\"><pre>let(<span class=\"pl-c1\">:start_date</span>) {\u00a0<span class=\"pl-c1\">Date</span>.parse(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>2015-12-31<span class=\"pl-pds\">'</span></span>) }\nlet(<span class=\"pl-c1\">:end_date</span>)   {\u00a0<span class=\"pl-c1\">Date</span>.parse(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>2015-12-31<span class=\"pl-pds\">'</span></span>) }\n\nsubject {\u00a0described_class.<span class=\"pl-k\">new</span>(<span class=\"pl-c1\">start_date:</span> start_date, <span class=\"pl-c1\">end_date:</span> end_date).compact }\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> etc.</span></pre></div>\n<p>And then, for different contexts, all you have to do is change the values for <code>starts_at</code> and <code>ends_at</code>:</p>\n<div class=\"highlight highlight-source-ruby\"><pre>context <span class=\"pl-s\"><span class=\"pl-pds\">'</span>when multiple dates in same month<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">do</span>\n  let(<span class=\"pl-c1\">:start_date</span>) { <span class=\"pl-c1\">Date</span>.parse(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>2015-12-30<span class=\"pl-pds\">'</span></span>) }\n  let(<span class=\"pl-c1\">:end_date</span>    { <span class=\"pl-c1\">Date</span>.parse(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>2015-12-31<span class=\"pl-pds\">'</span></span>) }\n\n  it <span class=\"pl-s\"><span class=\"pl-pds\">'</span>returns compact days<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">do</span>\n    expect(subject).to eq (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>30 - 31 Dec 2015<span class=\"pl-pds\">'</span></span>)\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre></div>\n<p>What do you think?</p>", "body_text": "Just a matter of style, but I think the tests are more meaningful if the subject reflects the actual \"subject\" of all expectations. So in order to dry this up a bit and make it more expressive I'd suggest to switch it to be actually compact:\nlet(:start_date) {\u00a0Date.parse('2015-12-31') }\nlet(:end_date)   {\u00a0Date.parse('2015-12-31') }\n\nsubject {\u00a0described_class.new(start_date: start_date, end_date: end_date).compact }\n\n# etc.\nAnd then, for different contexts, all you have to do is change the values for starts_at and ends_at:\ncontext 'when multiple dates in same month' do\n  let(:start_date) { Date.parse('2015-12-30') }\n  let(:end_date    { Date.parse('2015-12-31') }\n\n  it 'returns compact days' do\n    expect(subject).to eq ('30 - 31 Dec 2015')\n  end\nend\nWhat do you think?"}