{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/119588832", "pull_request_review_id": 41477889, "id": 119588832, "diff_hunk": "@@ -12,12 +12,16 @@ class Conference < ActiveRecord::Base\n   scope :ordered, ->(sort = {}) { order([sort[:order] || 'starts_on, name', sort[:direction] || 'asc'].join(' ')) }\n   scope :in_current_season, -> { where(season: Season.current) }\n \n+  def dates", "path": "app/models/conference.rb", "position": null, "original_position": 4, "commit_id": "4a2df11759069bd2507464bfbda8515466cdc3eb", "original_commit_id": "eadd69f85d996fe8d8a0e3de538862e958e6eeaa", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "body": "So, looking at the latter usage, this method only serves as a view helper and is never used solo, but *always* concatinated with `#compact`. So why offering direct access to `dates` at all, if it's never actually used? This can eventually make things more complex later on... imagine someone forgets to call `compact` - nothing useful will be rendered.\r\n\r\nI would suggest to just rename this method to `date_range` and directly return the compact version of it.\r\n\r\nThis can of course be done in multiple ways:\r\na) call the public method in the model\r\n```ruby\r\nDateRange.new(start_date: starts_on, end_date: ends_on).compact\r\n```\r\n\r\nb) directly return the compact version, e.g.\r\n```ruby\r\nclass DateRange\r\n  # ...\r\n  def self.call(start_date:, end_date:)\r\n    self.new(start_date: start_date, end_date: end_date).compact\r\n  end\r\nend\r\n\r\n# in the model:\r\nDateRange.call(start_date: starts_on, end_date: ends_on)\r\n```", "created_at": "2017-06-01T11:25:08Z", "updated_at": "2017-06-04T12:40:34Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/748#discussion_r119588832", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/748", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/119588832"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/748#discussion_r119588832"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/748"}}, "body_html": "<p>So, looking at the latter usage, this method only serves as a view helper and is never used solo, but <em>always</em> concatinated with <code>#compact</code>. So why offering direct access to <code>dates</code> at all, if it's never actually used? This can eventually make things more complex later on... imagine someone forgets to call <code>compact</code> - nothing useful will be rendered.</p>\n<p>I would suggest to just rename this method to <code>date_range</code> and directly return the compact version of it.</p>\n<p>This can of course be done in multiple ways:<br>\na) call the public method in the model</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-c1\">DateRange</span>.<span class=\"pl-k\">new</span>(<span class=\"pl-c1\">start_date:</span> starts_on, <span class=\"pl-c1\">end_date:</span> ends_on).compact</pre></div>\n<p>b) directly return the compact version, e.g.</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">DateRange</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">self.call</span>(<span class=\"pl-c1\">start_date:</span>, <span class=\"pl-c1\">end_date:</span>)\n    <span class=\"pl-c1\">self</span>.<span class=\"pl-k\">new</span>(<span class=\"pl-c1\">start_date:</span> start_date, <span class=\"pl-c1\">end_date:</span> end_date).compact\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> in the model:</span>\n<span class=\"pl-c1\">DateRange</span>.call(<span class=\"pl-c1\">start_date:</span> starts_on, <span class=\"pl-c1\">end_date:</span> ends_on)</pre></div>", "body_text": "So, looking at the latter usage, this method only serves as a view helper and is never used solo, but always concatinated with #compact. So why offering direct access to dates at all, if it's never actually used? This can eventually make things more complex later on... imagine someone forgets to call compact - nothing useful will be rendered.\nI would suggest to just rename this method to date_range and directly return the compact version of it.\nThis can of course be done in multiple ways:\na) call the public method in the model\nDateRange.new(start_date: starts_on, end_date: ends_on).compact\nb) directly return the compact version, e.g.\nclass DateRange\n  # ...\n  def self.call(start_date:, end_date:)\n    self.new(start_date: start_date, end_date: end_date).compact\n  end\nend\n\n# in the model:\nDateRange.call(start_date: starts_on, end_date: ends_on)"}