{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/119589687", "pull_request_review_id": 41477889, "id": 119589687, "diff_hunk": "@@ -41,6 +41,16 @@\n       end\n     end\n   end\n+  \n+  describe '#dates' do\n+    subject { FactoryGirl.build_stubbed(:conference) }\n+    \n+    it 'has a date range' do", "path": "spec/models/conference_spec.rb", "position": null, "original_position": 8, "commit_id": "4a2df11759069bd2507464bfbda8515466cdc3eb", "original_commit_id": "eadd69f85d996fe8d8a0e3de538862e958e6eeaa", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "body": "Not sure if the expectations here really fit the test. It does not test whether or not the return value is a `DateRange` object. Whether or not the internal values of the `DateRange` object match those of the conference is not really relevant I would say - that's internal logic of the `DateRange` class.\r\n\r\nYou could test the call to the constructor:\r\n```ruby\r\nit \"has a date range\" do\r\n  expect(DateRange)\r\n    .to receive(:new)\r\n    .with(start_date: subject.starts_on, ends_on: subject.ends_on)\r\n  expect(subject.dates).to be_a(DateRange)\r\nend\r\n```", "created_at": "2017-06-01T11:30:29Z", "updated_at": "2017-06-04T12:40:34Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/748#discussion_r119589687", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/748", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/119589687"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/748#discussion_r119589687"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/748"}}, "body_html": "<p>Not sure if the expectations here really fit the test. It does not test whether or not the return value is a <code>DateRange</code> object. Whether or not the internal values of the <code>DateRange</code> object match those of the conference is not really relevant I would say - that's internal logic of the <code>DateRange</code> class.</p>\n<p>You could test the call to the constructor:</p>\n<div class=\"highlight highlight-source-ruby\"><pre>it <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>has a date range<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">do</span>\n  expect(<span class=\"pl-c1\">DateRange</span>)\n    .to receive(<span class=\"pl-c1\">:new</span>)\n    .with(<span class=\"pl-c1\">start_date:</span> subject.starts_on, <span class=\"pl-c1\">ends_on:</span> subject.ends_on)\n  expect(subject.dates).to be_a(<span class=\"pl-c1\">DateRange</span>)\n<span class=\"pl-k\">end</span></pre></div>", "body_text": "Not sure if the expectations here really fit the test. It does not test whether or not the return value is a DateRange object. Whether or not the internal values of the DateRange object match those of the conference is not really relevant I would say - that's internal logic of the DateRange class.\nYou could test the call to the constructor:\nit \"has a date range\" do\n  expect(DateRange)\n    .to receive(:new)\n    .with(start_date: subject.starts_on, ends_on: subject.ends_on)\n  expect(subject.dates).to be_a(DateRange)\nend"}