{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/comments/310919991", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/issues/762#issuecomment-310919991", "issue_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/762", "id": 310919991, "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-25T18:39:30Z", "updated_at": "2017-06-25T18:39:30Z", "author_association": "MEMBER", "body_html": "<p>For your question on controller action vs. service objects <a href=\"https://github.com/f3pix\" class=\"user-mention\">@F3PiX</a> (I suppose the exporters are service objects - I tbh don't know them in detail): starting with the controller action is obviously the best approach. Why <strong>start</strong> things complex? <strong>BUT</strong>: if the corresponding action turns too big <em>(will probably happen if you parse and validate a CSV file)</em> I'd highly recommend to move this business logic into service objects and then just call them from your controller method. The main benefit: testability (and of course readability).</p>\n<p>Complex business logic does not really belong into controllers, therefore probably testing ones where one violates this may turn out to be unnecessary complex and painful. Having the business logic encapsulated in easier testable service objects and then just testing the interface between the controllers and them is way easier and less error prone.</p>\n<p>I hope that answers your question. Again, sorry for being super late to the party <g-emoji class=\"g-emoji\" alias=\"disappointed\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f61e.png\">\ud83d\ude1e</g-emoji></p>", "body_text": "For your question on controller action vs. service objects @F3PiX (I suppose the exporters are service objects - I tbh don't know them in detail): starting with the controller action is obviously the best approach. Why start things complex? BUT: if the corresponding action turns too big (will probably happen if you parse and validate a CSV file) I'd highly recommend to move this business logic into service objects and then just call them from your controller method. The main benefit: testability (and of course readability).\nComplex business logic does not really belong into controllers, therefore probably testing ones where one violates this may turn out to be unnecessary complex and painful. Having the business logic encapsulated in easier testable service objects and then just testing the interface between the controllers and them is way easier and less error prone.\nI hope that answers your question. Again, sorry for being super late to the party \ud83d\ude1e", "body": "For your question on controller action vs. service objects @F3PiX (I suppose the exporters are service objects - I tbh don't know them in detail): starting with the controller action is obviously the best approach. Why **start** things complex? **BUT**: if the corresponding action turns too big *(will probably happen if you parse and validate a CSV file)* I'd highly recommend to move this business logic into service objects and then just call them from your controller method. The main benefit: testability (and of course readability).\r\n\r\nComplex business logic does not really belong into controllers, therefore probably testing ones where one violates this may turn out to be unnecessary complex and painful. Having the business logic encapsulated in easier testable service objects and then just testing the interface between the controllers and them is way easier and less error prone.\r\n\r\nI hope that answers your question. Again, sorry for being super late to the party \ud83d\ude1e "}