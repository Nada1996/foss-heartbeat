{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/127186182", "pull_request_review_id": 49740987, "id": 127186182, "diff_hunk": "@@ -2,17 +2,77 @@\n require 'csv'\n \n RSpec.describe Conference::Importer do\n-  \n+  include ActionDispatch::TestProcess\n+\n   describe \"#call\" do\n+    let!(:file) { fixture_file_upload(\"spec/fixtures/files/test.csv\", 'text/csv') }\n+    subject { described_class.call(file) } # file is now a ActionDispatch tempfile\n+\n     it { puts file_fixture_path } # => spec/fixtures/files\n \n-    # let!(:file) { ?? }\n+    it 'works' do\n+      expect { subject }.not_to raise_error\n+      expect(CSV.foreach(file.path, { headers: true}).count).to eq 6\n+    end\n+\n     context 'with valid file' do\n-      subject { described_class.call(file) }\n \n-      xit 'works' do\n-        expect(subject).not_to raise_error(ArgumentError, /.csv/)\n+      it 'imports the valid conferences' do\n+        # 6 sample conferences in test.csv, 3 invalid\n+        expect(Conference.count).to eq 0\n+        expect{subject}.to change { Conference.count }.by(3)\n+      end\n+\n+      it 'updates an existing conference' do\n+        FactoryGirl.create(:conference, gid: 2017001, city: \"Bangalore\", country: \"Belgium\")\n+\n+        expect{subject}.to change{Conference.find_by(gid: 2017001).city}.from(\"Bangalore\").to(\"Gent\")\n+        expect{subject}.not_to change{Conference.find_by(gid: 2017001).country}\n+      end\n+\n+      it 'neglects a conference without a name' do\n+        # gid 2017003\n+        expect {subject}.not_to change{Conference.find_by(gid: 2017003)}\n+      end\n+\n+      it 'does not add a conference with invalid dates' do\n+        # gid 2017002 has an start_date later than end_date\n+        expect {subject}.not_to change{Conference.find_by(gid: 2017002)}\n+      end\n+\n+      it \"will not destroy conferences\" do\n+        # gid 2017010 is not in the .csv file\n+        FactoryGirl.create(:conference, gid: 2017010)\n+        expect {subject}.not_to change{Conference.find_by(gid: 2017010)}\n+      end\n+\n+      it 'assign the season_id' do\n+        FactoryGirl.create(:conference, gid: 2017001, season_id: nil)\n+        FactoryGirl.create(:conference, gid: 2018005, season_id: nil)\n+        s_2017 = FactoryGirl.create(:season, name: \"2017\")\n+        s_2018 = FactoryGirl.create(:season, name: \"2018\")\n+\n+        expect{subject}.to change{Conference.find_by(gid: 2017001).season_id}.to(s_2017.id)\n+        expect(Conference.find_by(gid: 2018005).season_id).to eq s_2018.id\n+      end\n+    end\n+\n+    context 'with non-csv file' do\n+      let(:file) { fixture_file_upload(\"spec/fixtures/files/test.csv\", 'json') }\n+\n+      it 'raises an error with other mime_type' do\n+        allow(described_class).to receive(:call).with(file).and_raise(ArgumentError)", "path": "spec/models/conference/importer_spec.rb", "position": null, "original_position": 68, "commit_id": "8ed60b9c5e671f22631336954a9f040b8697017b", "original_commit_id": "b15b2539d97f74b0b1da5de8734e9b9773863fac", "user": {"login": "carpodaster", "id": 164400, "avatar_url": "https://avatars2.githubusercontent.com/u/164400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carpodaster", "html_url": "https://github.com/carpodaster", "followers_url": "https://api.github.com/users/carpodaster/followers", "following_url": "https://api.github.com/users/carpodaster/following{/other_user}", "gists_url": "https://api.github.com/users/carpodaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/carpodaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carpodaster/subscriptions", "organizations_url": "https://api.github.com/users/carpodaster/orgs", "repos_url": "https://api.github.com/users/carpodaster/repos", "events_url": "https://api.github.com/users/carpodaster/events{/privacy}", "received_events_url": "https://api.github.com/users/carpodaster/received_events", "type": "User", "site_admin": false}, "body": "You're overriding the actual implementation that you want to test.\r\n\r\n```ruby\r\nexpect { described_class.call(file) }.to raise_error ArgumentError\r\n```", "created_at": "2017-07-13T10:53:07Z", "updated_at": "2017-07-13T16:12:43Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/775#discussion_r127186182", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/775", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/127186182"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/775#discussion_r127186182"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/775"}}, "body_html": "<p>You're overriding the actual implementation that you want to test.</p>\n<div class=\"highlight highlight-source-ruby\"><pre>expect { described_class.call(file) }.to raise_error <span class=\"pl-c1\">ArgumentError</span></pre></div>", "body_text": "You're overriding the actual implementation that you want to test.\nexpect { described_class.call(file) }.to raise_error ArgumentError"}