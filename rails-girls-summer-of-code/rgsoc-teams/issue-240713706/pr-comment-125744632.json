{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/125744632", "pull_request_review_id": 48164484, "id": 125744632, "diff_hunk": "@@ -38,7 +38,7 @@ def create\n \n     respond_to do |format|\n       if @user.save\n-        format.html { redirect_to params[:redirect_to] || @user, notice: 'User was successfully created.' }\n+        format.html { redirect_to params[:redirect_to].blank? ? @user : params[:redirect_to], notice: 'User was successfully created.' }", "path": "app/controllers/users_controller.rb", "position": null, "original_position": 5, "commit_id": "c9466b30c353ef954c2603ab74af70a95cb01457", "original_commit_id": "d855e3bb7f29eb94144820fccb93d868a07cd70b", "user": {"login": "carpodaster", "id": 164400, "avatar_url": "https://avatars2.githubusercontent.com/u/164400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carpodaster", "html_url": "https://github.com/carpodaster", "followers_url": "https://api.github.com/users/carpodaster/followers", "following_url": "https://api.github.com/users/carpodaster/following{/other_user}", "gists_url": "https://api.github.com/users/carpodaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/carpodaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carpodaster/subscriptions", "organizations_url": "https://api.github.com/users/carpodaster/orgs", "repos_url": "https://api.github.com/users/carpodaster/repos", "events_url": "https://api.github.com/users/carpodaster/events{/privacy}", "received_events_url": "https://api.github.com/users/carpodaster/received_events", "type": "User", "site_admin": false}, "body": "That works!\r\n\r\nHowever, there is a coding style referred to as _Tell, Don't Ask_ which can be applied here. What it means is that _asking_ a data structure something and then deciding on what to do can oftentimes be refactored to something where you just trust a data structure to know what to do when you send it a message (= calling a method on it). Here, the ternary clause _asks_ if the parameter is `blank?`  and branches off into two logical paths.\r\n\r\nThe previous implementation attempted to make use of the fact that `nil` is falsey. The `||` would use its left hand value first if it was something truthy, otherwise its right hand side would be chosen as the redirection target.\r\n\r\nThe bug that causes the behaviour is that `params[:redirect_to]` is actually never `nil` (you can inspect the values being send to the `users_controller#update` action to see what actual value it has).\r\n\r\nGoing back to the original implementation with the `||` operator, you can fix the bug using [a neat extension to Ruby objects provided by Rails' ActiveSupport](http://guides.rubyonrails.org/active_support_core_extensions.html#presence).", "created_at": "2017-07-05T20:10:19Z", "updated_at": "2017-07-05T20:47:58Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/777#discussion_r125744632", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/777", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/125744632"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/777#discussion_r125744632"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/777"}}, "body_html": "<p>That works!</p>\n<p>However, there is a coding style referred to as <em>Tell, Don't Ask</em> which can be applied here. What it means is that <em>asking</em> a data structure something and then deciding on what to do can oftentimes be refactored to something where you just trust a data structure to know what to do when you send it a message (= calling a method on it). Here, the ternary clause <em>asks</em> if the parameter is <code>blank?</code>  and branches off into two logical paths.</p>\n<p>The previous implementation attempted to make use of the fact that <code>nil</code> is falsey. The <code>||</code> would use its left hand value first if it was something truthy, otherwise its right hand side would be chosen as the redirection target.</p>\n<p>The bug that causes the behaviour is that <code>params[:redirect_to]</code> is actually never <code>nil</code> (you can inspect the values being send to the <code>users_controller#update</code> action to see what actual value it has).</p>\n<p>Going back to the original implementation with the <code>||</code> operator, you can fix the bug using <a href=\"http://guides.rubyonrails.org/active_support_core_extensions.html#presence\" rel=\"nofollow\">a neat extension to Ruby objects provided by Rails' ActiveSupport</a>.</p>", "body_text": "That works!\nHowever, there is a coding style referred to as Tell, Don't Ask which can be applied here. What it means is that asking a data structure something and then deciding on what to do can oftentimes be refactored to something where you just trust a data structure to know what to do when you send it a message (= calling a method on it). Here, the ternary clause asks if the parameter is blank?  and branches off into two logical paths.\nThe previous implementation attempted to make use of the fact that nil is falsey. The || would use its left hand value first if it was something truthy, otherwise its right hand side would be chosen as the redirection target.\nThe bug that causes the behaviour is that params[:redirect_to] is actually never nil (you can inspect the values being send to the users_controller#update action to see what actual value it has).\nGoing back to the original implementation with the || operator, you can fix the bug using a neat extension to Ruby objects provided by Rails' ActiveSupport."}