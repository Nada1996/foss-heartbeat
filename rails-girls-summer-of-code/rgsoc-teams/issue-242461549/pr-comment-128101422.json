{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/128101422", "pull_request_review_id": 50724575, "id": 128101422, "diff_hunk": "@@ -13,7 +13,7 @@ def destroy\n   private\n \n     def attendance\n-      current_user.attendances.find(params[:id])\n+      current_user.student_team.attendances.find(params[:id])", "path": "app/controllers/attendances_controller.rb", "position": null, "original_position": 5, "commit_id": "cad397230d5b0992b65449a289754cfe2c92ba23", "original_commit_id": "f05dc9eb358b4388df24f6e66172447ec471b7d4", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "body": "Oh, ok, sorry, I wasn't clear on what I actually mean \ud83d\ude48 It does not *necessarily*  need to be especially this certain exception. I just meant: if someone not being a student or on a team can access the controller action, the resulting error should somehow make clear what's wrong - and a 500 status could be anything \ud83d\ude09 \r\n\r\nThe way you put it now, sure it works, but it looks kinda weird: having the `student_team` fetched in two places and then explicitly raising the exception appears wrong in a controller, don't you think?\r\n\r\nIn which context is this controller used? If it's only used by the user actually owning the `attendance`, it could be simplified to\r\n```ruby\r\ndef attendance\r\n  current_user.attendances.find(params[:id])\r\nend\r\n```\r\n\r\nIf the user is also changing his or her teammates attendances, then one could maybe work with the abilities? Would look somewhat like this I think:\r\n```ruby\r\nclass AttendancesController < ApplicationController\r\n  load_and_authorize_resource\r\n\r\n  def update\r\n    @attendance.update_attributes!(attendance_params)\r\n    redirect_back fallback_location: user_path(current_user), notice: 'Ok, successfully updated'\r\n  end\r\n\r\n  def destroy\r\n    @attendance.destroy\r\n    redirect_back fallback_location: user_path(current_user), notice: 'Ok, the ticket was added back to the pool of available tickets'\r\n  end\r\n\r\n  private\r\n\r\n  def attendance_params\r\n    params.require(:attendance).permit(:confirmed)\r\n  end\r\nend\r\n```\r\n\r\nI would of course prefer the first scenario :v:", "created_at": "2017-07-18T21:30:55Z", "updated_at": "2017-07-24T14:01:27Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/789#discussion_r128101422", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/789", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/128101422"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/789#discussion_r128101422"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/789"}}, "body_html": "<p>Oh, ok, sorry, I wasn't clear on what I actually mean <g-emoji class=\"g-emoji\" alias=\"see_no_evil\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f648.png\">\ud83d\ude48</g-emoji> It does not <em>necessarily</em>  need to be especially this certain exception. I just meant: if someone not being a student or on a team can access the controller action, the resulting error should somehow make clear what's wrong - and a 500 status could be anything <g-emoji class=\"g-emoji\" alias=\"wink\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f609.png\">\ud83d\ude09</g-emoji></p>\n<p>The way you put it now, sure it works, but it looks kinda weird: having the <code>student_team</code> fetched in two places and then explicitly raising the exception appears wrong in a controller, don't you think?</p>\n<p>In which context is this controller used? If it's only used by the user actually owning the <code>attendance</code>, it could be simplified to</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">attendance</span>\n  current_user.attendances.find(params[<span class=\"pl-c1\">:id</span>])\n<span class=\"pl-k\">end</span></pre></div>\n<p>If the user is also changing his or her teammates attendances, then one could maybe work with the abilities? Would look somewhat like this I think:</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">AttendancesController<span class=\"pl-e\"> &lt; ApplicationController</span></span>\n  load_and_authorize_resource\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">update</span>\n    <span class=\"pl-smi\">@attendance</span>.update_attributes!(attendance_params)\n    redirect_back <span class=\"pl-c1\">fallback_location:</span> user_path(current_user), <span class=\"pl-c1\">notice:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Ok, successfully updated<span class=\"pl-pds\">'</span></span>\n  <span class=\"pl-k\">end</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">destroy</span>\n    <span class=\"pl-smi\">@attendance</span>.destroy\n    redirect_back <span class=\"pl-c1\">fallback_location:</span> user_path(current_user), <span class=\"pl-c1\">notice:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Ok, the ticket was added back to the pool of available tickets<span class=\"pl-pds\">'</span></span>\n  <span class=\"pl-k\">end</span>\n\n  <span class=\"pl-k\">private</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">attendance_params</span>\n    params.require(<span class=\"pl-c1\">:attendance</span>).permit(<span class=\"pl-c1\">:confirmed</span>)\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre></div>\n<p>I would of course prefer the first scenario <g-emoji class=\"g-emoji\" alias=\"v\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/270c.png\">\u270c\ufe0f</g-emoji></p>", "body_text": "Oh, ok, sorry, I wasn't clear on what I actually mean \ud83d\ude48 It does not necessarily  need to be especially this certain exception. I just meant: if someone not being a student or on a team can access the controller action, the resulting error should somehow make clear what's wrong - and a 500 status could be anything \ud83d\ude09\nThe way you put it now, sure it works, but it looks kinda weird: having the student_team fetched in two places and then explicitly raising the exception appears wrong in a controller, don't you think?\nIn which context is this controller used? If it's only used by the user actually owning the attendance, it could be simplified to\ndef attendance\n  current_user.attendances.find(params[:id])\nend\nIf the user is also changing his or her teammates attendances, then one could maybe work with the abilities? Would look somewhat like this I think:\nclass AttendancesController < ApplicationController\n  load_and_authorize_resource\n\n  def update\n    @attendance.update_attributes!(attendance_params)\n    redirect_back fallback_location: user_path(current_user), notice: 'Ok, successfully updated'\n  end\n\n  def destroy\n    @attendance.destroy\n    redirect_back fallback_location: user_path(current_user), notice: 'Ok, the ticket was added back to the pool of available tickets'\n  end\n\n  private\n\n  def attendance_params\n    params.require(:attendance).permit(:confirmed)\n  end\nend\nI would of course prefer the first scenario \u270c\ufe0f", "in_reply_to_id": 127055568}