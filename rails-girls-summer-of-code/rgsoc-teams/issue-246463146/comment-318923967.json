{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/comments/318923967", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/805#issuecomment-318923967", "issue_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/805", "id": 318923967, "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-30T19:33:19Z", "updated_at": "2017-07-30T19:33:19Z", "author_association": "MEMBER", "body_html": "<p>Hey <a href=\"https://github.com/juuh42dias\" class=\"user-mention\">@juuh42dias</a> thanx for the PR <g-emoji class=\"g-emoji\" alias=\"green_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49a.png\">\ud83d\udc9a</g-emoji></p>\n<p>I already looked into bits of the code and it made me wonder if the data model you chose may eventually make things harder for you as they needed to be. Therefore, can you upfront, before I dig deeper into this maybe quickly explain why you chose this data model?</p>\n<p>I will briefly explain what I think would be a simpler approach - no need for you to take this as a source of truth and implement it like this of course! Please feel fee to always ping me on Slack if something is unclear or I need to explain things in more detail <em>(I reduced my active Slack teams to &lt; 10 in the last week - should be able to respond fairly quick now)</em></p>\n<p><strong>How to add new attributes?</strong><br>\nI have two possible approaches, which depends on how the new <code>comment</code>, <code>lightning_talk</code> etc. attributes should be added to the <code>ConferencePreference</code> model. I would also love to have a word by <a href=\"https://github.com/mkalininait\" class=\"user-mention\">@mkalininait</a> on this, how it makes most sense for you. I see two approaches:</p>\n<ol>\n<li>ONE <code>comment</code>, <code>lightning_talk</code> etc. for ALL preferences</li>\n<li>ONE <code>comment</code>, <code>lightning_talk</code> etc. for PER preference <em>(different to how it is implemented in this PR)</em></li>\n</ol>\n<h3>1. ONE <code>comment</code>, <code>lightning_talk</code> etc. for ALL preferences</h3>\n<p><em>(this is the approach you chose - telling from e.g. the screenshot)</em></p>\n<p>If we take the <code>ConferencePreference</code> model as a starting point for orga users later on confirming actual attendences, it would be easiest to have the whole thing as one entity on the <code>Team</code>. So instead of having a <code>conference_id</code> and an <code>option</code> attribute on the model, it could also look like this:</p>\n<div class=\"highlight highlight-source-ruby\"><pre>create_table <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>conference_preferences<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">id:</span> <span class=\"pl-c1\">:serial</span>, <span class=\"pl-c1\">force:</span> <span class=\"pl-c1\">:cascade</span> <span class=\"pl-k\">do</span> |<span class=\"pl-smi\">t</span>|\n  t.bigint <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>team_id<span class=\"pl-pds\">\"</span></span>\n  t.bigint <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>conference1_id<span class=\"pl-pds\">\"</span></span>\n  t.bigint <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>conference2_id<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> etc.</span></pre></div>\n<p>If done like this, there's also no reason for an additional <code>ConferencePreferenceInfo</code> model - all the attributes, e.g. the <code>comment</code> can simply be added to the <code>ConferencePreference</code> object itself, so you end up with a simple 1 x 1 association between the <code>Team</code> and the <code>ConferencePreference</code> object:</p>\n<p><a href=\"https://user-images.githubusercontent.com/3491815/28756354-f18b7e2a-756c-11e7-9e10-c02e07b3515d.png\" target=\"_blank\"><img src=\"https://user-images.githubusercontent.com/3491815/28756354-f18b7e2a-756c-11e7-9e10-c02e07b3515d.png\" alt=\"untitled diagram 1\" style=\"max-width:100%;\"></a></p>\n<p>In terms of Rails, this afaik basically just means, the <code>ConferencePreference</code> model has two belongs-to associations to the <code>Conference</code> table:</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">ConferencePreference</span>\n  belongs_to <span class=\"pl-c1\">:conference1</span>, <span class=\"pl-c1\">foreign_key:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>conference1_id<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">class_name:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Conference<span class=\"pl-pds\">\"</span></span>\n  belongs_to <span class=\"pl-c1\">:conference2</span>, <span class=\"pl-c1\">foreign_key:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>conference2_id<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">class_name:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Conference<span class=\"pl-pds\">\"</span></span></pre></div>\n<p>For the two <code>terms_and_condition</code> types of check-boxes: these in my opinion can also be \"virtual\" attributes not persisted to the DB but only present on the object instance. Maybe take look at ActiveRecord's <a href=\"http://guides.rubyonrails.org/active_record_validations.html#acceptance\" rel=\"nofollow\">acceptance type of validation</a>.</p>\n<h3>2 ONE <code>comment</code>, <code>lightning_talk</code> etc. for PER preference</h3>\n<p><em>(different to how you implemented it in this PR)</em></p>\n<p>For this approach, I'd also spare out the <code>ConferencePreferenceInfo</code> model and instead add the new attributes straight onto the <code>ConferencePreference</code> model. This approximately looks like this:</p>\n<p><a href=\"https://user-images.githubusercontent.com/3491815/28756417-05352632-756e-11e7-9cb9-bd7ac54bb47c.png\" target=\"_blank\"><img src=\"https://user-images.githubusercontent.com/3491815/28756417-05352632-756e-11e7-9cb9-bd7ac54bb47c.png\" alt=\"untitled diagram 2\" style=\"max-width:100%;\"></a></p>\n<p>Again, the <code>terms_and_condition</code> checkboxes can probably be added as non-persisted attributes.</p>\n<h3>Pros / Cons / Preferences</h3>\n<p>Depending on <a href=\"https://github.com/mkalininait\" class=\"user-mention\">@mkalininait</a> 's initial idea of this, I'd personally prefer the first approach, since it's just the simplest way possible. There's not even the need to validate the number of <code>ConferencePrefereces</code> per <code>Team</code> (since it will always be just one), etc.</p>\n<p>Of course, the requirements may potentially change within the next years, but I'm personally not a huge fan of building things more complex upfront for things that <em>\"may</em>\" eventually come <g-emoji class=\"g-emoji\" alias=\"wink\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f609.png\">\ud83d\ude09</g-emoji></p>\n<p>I'm putting this on \"request changes\" just for this question I have here <em>(it helps me to keep track of my Github notifications if I already see, that I did an initial review on this)</em></p>", "body_text": "Hey @juuh42dias thanx for the PR \ud83d\udc9a\nI already looked into bits of the code and it made me wonder if the data model you chose may eventually make things harder for you as they needed to be. Therefore, can you upfront, before I dig deeper into this maybe quickly explain why you chose this data model?\nI will briefly explain what I think would be a simpler approach - no need for you to take this as a source of truth and implement it like this of course! Please feel fee to always ping me on Slack if something is unclear or I need to explain things in more detail (I reduced my active Slack teams to < 10 in the last week - should be able to respond fairly quick now)\nHow to add new attributes?\nI have two possible approaches, which depends on how the new comment, lightning_talk etc. attributes should be added to the ConferencePreference model. I would also love to have a word by @mkalininait on this, how it makes most sense for you. I see two approaches:\n\nONE comment, lightning_talk etc. for ALL preferences\nONE comment, lightning_talk etc. for PER preference (different to how it is implemented in this PR)\n\n1. ONE comment, lightning_talk etc. for ALL preferences\n(this is the approach you chose - telling from e.g. the screenshot)\nIf we take the ConferencePreference model as a starting point for orga users later on confirming actual attendences, it would be easiest to have the whole thing as one entity on the Team. So instead of having a conference_id and an option attribute on the model, it could also look like this:\ncreate_table \"conference_preferences\", id: :serial, force: :cascade do |t|\n  t.bigint \"team_id\"\n  t.bigint \"conference1_id\"\n  t.bigint \"conference2_id\"\n# etc.\nIf done like this, there's also no reason for an additional ConferencePreferenceInfo model - all the attributes, e.g. the comment can simply be added to the ConferencePreference object itself, so you end up with a simple 1 x 1 association between the Team and the ConferencePreference object:\n\nIn terms of Rails, this afaik basically just means, the ConferencePreference model has two belongs-to associations to the Conference table:\nclass ConferencePreference\n  belongs_to :conference1, foreign_key: \"conference1_id\", class_name: \"Conference\"\n  belongs_to :conference2, foreign_key: \"conference2_id\", class_name: \"Conference\"\nFor the two terms_and_condition types of check-boxes: these in my opinion can also be \"virtual\" attributes not persisted to the DB but only present on the object instance. Maybe take look at ActiveRecord's acceptance type of validation.\n2 ONE comment, lightning_talk etc. for PER preference\n(different to how you implemented it in this PR)\nFor this approach, I'd also spare out the ConferencePreferenceInfo model and instead add the new attributes straight onto the ConferencePreference model. This approximately looks like this:\n\nAgain, the terms_and_condition checkboxes can probably be added as non-persisted attributes.\nPros / Cons / Preferences\nDepending on @mkalininait 's initial idea of this, I'd personally prefer the first approach, since it's just the simplest way possible. There's not even the need to validate the number of ConferencePrefereces per Team (since it will always be just one), etc.\nOf course, the requirements may potentially change within the next years, but I'm personally not a huge fan of building things more complex upfront for things that \"may\" eventually come \ud83d\ude09\nI'm putting this on \"request changes\" just for this question I have here (it helps me to keep track of my Github notifications if I already see, that I did an initial review on this)", "body": "Hey @juuh42dias thanx for the PR \ud83d\udc9a \r\n\r\nI already looked into bits of the code and it made me wonder if the data model you chose may eventually make things harder for you as they needed to be. Therefore, can you upfront, before I dig deeper into this maybe quickly explain why you chose this data model?\r\n\r\nI will briefly explain what I think would be a simpler approach - no need for you to take this as a source of truth and implement it like this of course! Please feel fee to always ping me on Slack if something is unclear or I need to explain things in more detail _(I reduced my active Slack teams to < 10 in the last week - should be able to respond fairly quick now)_\r\n\r\n**How to add new attributes?**\r\nI have two possible approaches, which depends on how the new `comment`, `lightning_talk` etc. attributes should be added to the `ConferencePreference` model. I would also love to have a word by @mkalininait on this, how it makes most sense for you. I see two approaches:\r\n1. ONE `comment`, `lightning_talk` etc. for ALL preferences\r\n1. ONE `comment`, `lightning_talk` etc. for PER preference _(different to how it is implemented in this PR)_\r\n\r\n### 1. ONE `comment`, `lightning_talk` etc. for ALL preferences\r\n_(this is the approach you chose - telling from e.g. the screenshot)_\r\n\r\nIf we take the `ConferencePreference` model as a starting point for orga users later on confirming actual attendences, it would be easiest to have the whole thing as one entity on the `Team`. So instead of having a `conference_id` and an `option` attribute on the model, it could also look like this:\r\n```ruby\r\ncreate_table \"conference_preferences\", id: :serial, force: :cascade do |t|\r\n  t.bigint \"team_id\"\r\n  t.bigint \"conference1_id\"\r\n  t.bigint \"conference2_id\"\r\n# etc.\r\n```\r\n\r\nIf done like this, there's also no reason for an additional `ConferencePreferenceInfo` model - all the attributes, e.g. the `comment` can simply be added to the `ConferencePreference` object itself, so you end up with a simple 1 x 1 association between the `Team` and the `ConferencePreference` object:\r\n\r\n![untitled diagram 1](https://user-images.githubusercontent.com/3491815/28756354-f18b7e2a-756c-11e7-9e10-c02e07b3515d.png)\r\n\r\n\r\nIn terms of Rails, this afaik basically just means, the `ConferencePreference` model has two belongs-to associations to the `Conference` table:\r\n```ruby\r\nclass ConferencePreference\r\n  belongs_to :conference1, foreign_key: \"conference1_id\", class_name: \"Conference\"\r\n  belongs_to :conference2, foreign_key: \"conference2_id\", class_name: \"Conference\"\r\n```\r\n\r\nFor the two `terms_and_condition` types of check-boxes: these in my opinion can also be \"virtual\" attributes not persisted to the DB but only present on the object instance. Maybe take look at ActiveRecord's [acceptance type of validation](http://guides.rubyonrails.org/active_record_validations.html#acceptance).\r\n\r\n### 2 ONE `comment`, `lightning_talk` etc. for PER preference\r\n_(different to how you implemented it in this PR)_\r\n\r\nFor this approach, I'd also spare out the `ConferencePreferenceInfo` model and instead add the new attributes straight onto the `ConferencePreference` model. This approximately looks like this:\r\n\r\n![untitled diagram 2](https://user-images.githubusercontent.com/3491815/28756417-05352632-756e-11e7-9cb9-bd7ac54bb47c.png)\r\n\r\nAgain, the `terms_and_condition` checkboxes can probably be added as non-persisted attributes.\r\n\r\n### Pros / Cons / Preferences\r\nDepending on @mkalininait 's initial idea of this, I'd personally prefer the first approach, since it's just the simplest way possible. There's not even the need to validate the number of `ConferencePrefereces` per `Team` (since it will always be just one), etc.\r\n\r\nOf course, the requirements may potentially change within the next years, but I'm personally not a huge fan of building things more complex upfront for things that *\"may*\" eventually come \ud83d\ude09 \r\n\r\nI'm putting this on \"request changes\" just for this question I have here _(it helps me to keep track of my Github notifications if I already see, that I did an initial review on this)_\r\n"}