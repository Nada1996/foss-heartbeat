{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/131000016", "pull_request_review_id": 53936380, "id": 131000016, "diff_hunk": "@@ -48,7 +47,7 @@ def create\n   def update\n     @conferences = conference_list\n     respond_to do |format|\n-      if @team.update_attributes(team_params)\n+      if @team.update_attributes(team_params) && terms_accepted?", "path": "app/controllers/orga/teams_controller.rb", "position": null, "original_position": 15, "commit_id": "abaff13621ec0f202bebf0f042b24b63b8216afb", "original_commit_id": "acc831417a8ae6062f36f08ecf73972760a686c5", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "body": "I would prefer to use an [acceptance](http://guides.rubyonrails.org/active_record_validations.html#acceptance) validation here instead. I personally find it way clearer, since it does not leak any validation code from the model into the controller.\r\n\r\nIt works like this:\r\n\r\n1. You define a validation on the model:\r\n```ruby\r\nclass ConferencePreference\r\n  validates :terms_of_ticket, acceptance: true\r\n  validates :terms_of_travel, acceptance: true\r\nend\r\n```\r\n\u261d\ufe0f  note that these two attributes **are not** backed by a DB column\r\n\r\n2. Add the necessary field to the form:\r\n```ruby\r\n= f.simple_fields_for :conference_preference do |c|\r\n  = c.input :first_conference_id, collection: @conferences.group_by(&:region)\r\n  = c.input :second_conference_id, collection: @conferences.group_by(&:region)\r\n  = c.input :comment\r\n  = c.input :terms_of_ticket, as: :checkbox\r\n  = c.input :terms_of_travel, as: :checkbox\r\n  # etc.\r\n```\r\n\r\n3. And then simply permit it in the controller\r\n\r\n", "created_at": "2017-08-02T21:19:56Z", "updated_at": "2017-08-08T00:45:00Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/810#discussion_r131000016", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/810", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/131000016"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/810#discussion_r131000016"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/810"}}, "body_html": "<p>I would prefer to use an <a href=\"http://guides.rubyonrails.org/active_record_validations.html#acceptance\" rel=\"nofollow\">acceptance</a> validation here instead. I personally find it way clearer, since it does not leak any validation code from the model into the controller.</p>\n<p>It works like this:</p>\n<ol>\n<li>You define a validation on the model:</li>\n</ol>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">ConferencePreference</span>\n  validates <span class=\"pl-c1\">:terms_of_ticket</span>, <span class=\"pl-c1\">acceptance:</span> <span class=\"pl-c1\">true</span>\n  validates <span class=\"pl-c1\">:terms_of_travel</span>, <span class=\"pl-c1\">acceptance:</span> <span class=\"pl-c1\">true</span>\n<span class=\"pl-k\">end</span></pre></div>\n<p><g-emoji class=\"g-emoji\" alias=\"point_up\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/261d.png\">\u261d\ufe0f</g-emoji>  note that these two attributes <strong>are not</strong> backed by a DB column</p>\n<ol start=\"2\">\n<li>Add the necessary field to the form:</li>\n</ol>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-k\">=</span> f.simple_fields_for <span class=\"pl-c1\">:conference_preference</span> <span class=\"pl-k\">do</span> |<span class=\"pl-smi\">c</span>|\n  <span class=\"pl-k\">=</span> c.input <span class=\"pl-c1\">:first_conference_id</span>, <span class=\"pl-c1\">collection:</span> <span class=\"pl-smi\">@conferences</span>.group_by(<span class=\"pl-k\">&amp;</span><span class=\"pl-c1\">:region</span>)\n  <span class=\"pl-k\">=</span> c.input <span class=\"pl-c1\">:second_conference_id</span>, <span class=\"pl-c1\">collection:</span> <span class=\"pl-smi\">@conferences</span>.group_by(<span class=\"pl-k\">&amp;</span><span class=\"pl-c1\">:region</span>)\n  <span class=\"pl-k\">=</span> c.input <span class=\"pl-c1\">:comment</span>\n  <span class=\"pl-k\">=</span> c.input <span class=\"pl-c1\">:terms_of_ticket</span>, <span class=\"pl-c1\">as:</span> <span class=\"pl-c1\">:checkbox</span>\n  <span class=\"pl-k\">=</span> c.input <span class=\"pl-c1\">:terms_of_travel</span>, <span class=\"pl-c1\">as:</span> <span class=\"pl-c1\">:checkbox</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> etc.</span></pre></div>\n<ol start=\"3\">\n<li>And then simply permit it in the controller</li>\n</ol>", "body_text": "I would prefer to use an acceptance validation here instead. I personally find it way clearer, since it does not leak any validation code from the model into the controller.\nIt works like this:\n\nYou define a validation on the model:\n\nclass ConferencePreference\n  validates :terms_of_ticket, acceptance: true\n  validates :terms_of_travel, acceptance: true\nend\n\u261d\ufe0f  note that these two attributes are not backed by a DB column\n\nAdd the necessary field to the form:\n\n= f.simple_fields_for :conference_preference do |c|\n  = c.input :first_conference_id, collection: @conferences.group_by(&:region)\n  = c.input :second_conference_id, collection: @conferences.group_by(&:region)\n  = c.input :comment\n  = c.input :terms_of_ticket, as: :checkbox\n  = c.input :terms_of_travel, as: :checkbox\n  # etc.\n\nAnd then simply permit it in the controller"}