{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/comments/321607916", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/812#issuecomment-321607916", "issue_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/812", "id": 321607916, "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-10T16:44:27Z", "updated_at": "2017-08-10T16:44:27Z", "author_association": "MEMBER", "body_html": "<p>Thanx for clearifying again <a href=\"https://github.com/mkalininait\" class=\"user-mention\">@mkalininait</a> <g-emoji class=\"g-emoji\" alias=\"green_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49a.png\">\ud83d\udc9a</g-emoji></p>\n<p>This is all getting way too complex, I'm so sorry <a href=\"https://github.com/juuh42dias\" class=\"user-mention\">@juuh42dias</a> <g-emoji class=\"g-emoji\" alias=\"see_no_evil\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f648.png\">\ud83d\ude48</g-emoji></p>\n<p>Let's just step back and build it the most basic way possible: with real DB columns</p>\n<ol>\n<li>Add two new columns to the <code>ConferencePreference</code> model:\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-c1\">terms_of_ticket:</span> <span class=\"pl-c1\">:boolean</span>, <span class=\"pl-c1\">default:</span> <span class=\"pl-c1\">false</span>\n<span class=\"pl-c1\">terms_of_travel:</span> <span class=\"pl-c1\">:boolean</span>, <span class=\"pl-c1\">default:</span> <span class=\"pl-c1\">false</span></pre></div>\n</li>\n<li>Add the two checkboxes to the form and allow them in the controller</li>\n<li>Add a simple validation of these boolean fields to the model\n<div class=\"highlight highlight-source-ruby\"><pre>validates <span class=\"pl-c1\">:terms_of_ticket</span>, <span class=\"pl-c1\">inclusion:</span> { <span class=\"pl-c1\">in:</span> [<span class=\"pl-c1\">true</span>] }, <span class=\"pl-c1\">unless:</span> <span class=\"pl-c1\">Proc</span>.<span class=\"pl-k\">new</span> { |<span class=\"pl-smi\">a</span>| a.first_conference_id.blank? <span class=\"pl-k\">&amp;&amp;</span> a.second_conference_id.blank? }\nvalidates <span class=\"pl-c1\">:terms_of_travel</span>, <span class=\"pl-c1\">inclusion:</span> { <span class=\"pl-c1\">in:</span> [<span class=\"pl-c1\">true</span>] }, <span class=\"pl-c1\">unless:</span> <span class=\"pl-c1\">Proc</span>.<span class=\"pl-k\">new</span> { |<span class=\"pl-smi\">a</span>| a.first_conference_id.blank? <span class=\"pl-k\">&amp;&amp;</span> a.second_conference_id.blank? }</pre></div>\n<em>(you can also extract the proc into a method - my brain is just to melted to write this outta my head)</em></li>\n</ol>\n<p>I think this should finally give us the desired behavior and it's still understandable <g-emoji class=\"g-emoji\" alias=\"v\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/270c.png\">\u270c\ufe0f</g-emoji></p>", "body_text": "Thanx for clearifying again @mkalininait \ud83d\udc9a\nThis is all getting way too complex, I'm so sorry @juuh42dias \ud83d\ude48\nLet's just step back and build it the most basic way possible: with real DB columns\n\nAdd two new columns to the ConferencePreference model:\nterms_of_ticket: :boolean, default: false\nterms_of_travel: :boolean, default: false\n\nAdd the two checkboxes to the form and allow them in the controller\nAdd a simple validation of these boolean fields to the model\nvalidates :terms_of_ticket, inclusion: { in: [true] }, unless: Proc.new { |a| a.first_conference_id.blank? && a.second_conference_id.blank? }\nvalidates :terms_of_travel, inclusion: { in: [true] }, unless: Proc.new { |a| a.first_conference_id.blank? && a.second_conference_id.blank? }\n(you can also extract the proc into a method - my brain is just to melted to write this outta my head)\n\nI think this should finally give us the desired behavior and it's still understandable \u270c\ufe0f", "body": "Thanx for clearifying again @mkalininait \ud83d\udc9a \r\n\r\nThis is all getting way too complex, I'm so sorry @juuh42dias \ud83d\ude48 \r\n\r\nLet's just step back and build it the most basic way possible: with real DB columns\r\n\r\n1. Add two new columns to the `ConferencePreference` model:\r\n    ```ruby\r\n    terms_of_ticket: :boolean, default: false\r\n    terms_of_travel: :boolean, default: false\r\n    ```\r\n1. Add the two checkboxes to the form and allow them in the controller\r\n1. Add a simple validation of these boolean fields to the model\r\n    ```ruby\r\n    validates :terms_of_ticket, inclusion: { in: [true] }, unless: Proc.new { |a| a.first_conference_id.blank? && a.second_conference_id.blank? }\r\n    validates :terms_of_travel, inclusion: { in: [true] }, unless: Proc.new { |a| a.first_conference_id.blank? && a.second_conference_id.blank? }\r\n    ```\r\n    _(you can also extract the proc into a method - my brain is just to melted to write this outta my head)_\r\n\r\nI think this should finally give us the desired behavior and it's still understandable \u270c\ufe0f "}