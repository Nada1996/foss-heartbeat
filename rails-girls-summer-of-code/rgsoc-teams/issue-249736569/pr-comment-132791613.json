{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/132791613", "pull_request_review_id": 55914838, "id": 132791613, "diff_hunk": "@@ -106,4 +101,23 @@ def set_display_roles\n       @display_roles = ['student']\n       @display_roles.map!(&:pluralize)\n     end\n+\n+    def show_teams_by(params)", "path": "app/controllers/teams_controller.rb", "position": null, "original_position": 28, "commit_id": "e4f479aa48b76792f76d5d2875707405b9079fc2", "original_commit_id": "2fc63b5c518ec46275ea3036c8ab77fea8d1b0ab", "user": {"login": "carpodaster", "id": 164400, "avatar_url": "https://avatars2.githubusercontent.com/u/164400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carpodaster", "html_url": "https://github.com/carpodaster", "followers_url": "https://api.github.com/users/carpodaster/followers", "following_url": "https://api.github.com/users/carpodaster/following{/other_user}", "gists_url": "https://api.github.com/users/carpodaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/carpodaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carpodaster/subscriptions", "organizations_url": "https://api.github.com/users/carpodaster/orgs", "repos_url": "https://api.github.com/users/carpodaster/repos", "events_url": "https://api.github.com/users/carpodaster/events{/privacy}", "received_events_url": "https://api.github.com/users/carpodaster/received_events", "type": "User", "site_admin": false}, "body": "`params` is available as a controller method, you don't need to pass it as an argument. With the argument gone, I would go for a more generic method name, something like `find_teams`\r\n\r\nIt is also a veeeery long method.\r\n\r\nI'm wondering why we only include the activities (w/ sorting) when there is a `:sort` param. I would think this way of sorting / eager loading makes sense whether or not we sort stuff. Do you know, @klappradla or @alicetragedy ?\r\n\r\nProvided we allow combining all these options, we can just build up the query instead of having a complex `case` or `if \u2026 else` statement:\r\n\r\n```ruby\r\ndirection = params[:direction] == 'asc' ? 'ASC' : 'DESC'\r\n# start with the \"base scope\"\r\n@teams = Team.by_season_phase.includes(:activities).order(\"teams.kind, activities.created_at #{direction}\").references(:activities)\r\n# Re-assign @teams if conditions apply:\r\n@teams = @teams.by_season if foo\r\n@teams = @teams.by_something_else if bar\r\n```\r\n\r\nDoes that make sense?", "created_at": "2017-08-11T22:00:16Z", "updated_at": "2017-09-06T18:03:41Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/814#discussion_r132791613", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/814", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/132791613"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/814#discussion_r132791613"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/814"}}, "body_html": "<p><code>params</code> is available as a controller method, you don't need to pass it as an argument. With the argument gone, I would go for a more generic method name, something like <code>find_teams</code></p>\n<p>It is also a veeeery long method.</p>\n<p>I'm wondering why we only include the activities (w/ sorting) when there is a <code>:sort</code> param. I would think this way of sorting / eager loading makes sense whether or not we sort stuff. Do you know, <a href=\"https://github.com/klappradla\" class=\"user-mention\">@klappradla</a> or <a href=\"https://github.com/alicetragedy\" class=\"user-mention\">@alicetragedy</a> ?</p>\n<p>Provided we allow combining all these options, we can just build up the query instead of having a complex <code>case</code> or <code>if \u2026 else</code> statement:</p>\n<div class=\"highlight highlight-source-ruby\"><pre>direction <span class=\"pl-k\">=</span> params[<span class=\"pl-c1\">:direction</span>] <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>asc<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>ASC<span class=\"pl-pds\">'</span></span> : <span class=\"pl-s\"><span class=\"pl-pds\">'</span>DESC<span class=\"pl-pds\">'</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> start with the \"base scope\"</span>\n<span class=\"pl-smi\">@teams</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Team</span>.by_season_phase.includes(<span class=\"pl-c1\">:activities</span>).order(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>teams.kind, activities.created_at <span class=\"pl-pse\">#{</span><span class=\"pl-s1\">direction</span><span class=\"pl-pse\">}</span><span class=\"pl-pds\">\"</span></span>).references(<span class=\"pl-c1\">:activities</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Re-assign @teams if conditions apply:</span>\n<span class=\"pl-smi\">@teams</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">@teams</span>.by_season <span class=\"pl-k\">if</span> foo\n<span class=\"pl-smi\">@teams</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">@teams</span>.by_something_else <span class=\"pl-k\">if</span> bar</pre></div>\n<p>Does that make sense?</p>", "body_text": "params is available as a controller method, you don't need to pass it as an argument. With the argument gone, I would go for a more generic method name, something like find_teams\nIt is also a veeeery long method.\nI'm wondering why we only include the activities (w/ sorting) when there is a :sort param. I would think this way of sorting / eager loading makes sense whether or not we sort stuff. Do you know, @klappradla or @alicetragedy ?\nProvided we allow combining all these options, we can just build up the query instead of having a complex case or if \u2026 else statement:\ndirection = params[:direction] == 'asc' ? 'ASC' : 'DESC'\n# start with the \"base scope\"\n@teams = Team.by_season_phase.includes(:activities).order(\"teams.kind, activities.created_at #{direction}\").references(:activities)\n# Re-assign @teams if conditions apply:\n@teams = @teams.by_season if foo\n@teams = @teams.by_something_else if bar\nDoes that make sense?"}