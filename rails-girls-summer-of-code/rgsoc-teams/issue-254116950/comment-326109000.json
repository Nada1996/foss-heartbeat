{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/comments/326109000", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/issues/845#issuecomment-326109000", "issue_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/845", "id": 326109000, "user": {"login": "carpodaster", "id": 164400, "avatar_url": "https://avatars2.githubusercontent.com/u/164400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carpodaster", "html_url": "https://github.com/carpodaster", "followers_url": "https://api.github.com/users/carpodaster/followers", "following_url": "https://api.github.com/users/carpodaster/following{/other_user}", "gists_url": "https://api.github.com/users/carpodaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/carpodaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carpodaster/subscriptions", "organizations_url": "https://api.github.com/users/carpodaster/orgs", "repos_url": "https://api.github.com/users/carpodaster/repos", "events_url": "https://api.github.com/users/carpodaster/events{/privacy}", "received_events_url": "https://api.github.com/users/carpodaster/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-30T20:27:28Z", "updated_at": "2017-08-30T20:27:28Z", "author_association": "OWNER", "body_html": "<p>I always thought that rubocop rules aren't very inviting for people new to the Ruby programming language. I may be wrong on this one, but I would still like to keep the linting rules to a minimum.</p>\n<p>Things that come to mind (opinionated):</p>\n<ul>\n<li>Indentation rules: 2 whitespaces, no extra indentation for private methods</li>\n<li>New hash syntax (<code>{ foo: :bar }</code> instead of <code>{ :foo =&gt; :bar }</code>)</li>\n<li>Aligning <code>case</code> and <code>when</code> on the same level</li>\n<li>Lines not longer than ~100 characters</li>\n<li>No trailing whitespace</li>\n<li>First-level <code>describe</code> should be <code>RSpec.describe</code></li>\n<li>No parentheses for method definitions <em>without</em> args, mandatory parentheses for method definitions <em>with</em> args</li>\n<li>Omit parenthesis on method calls without arguments</li>\n<li>Omit <code>FactoryGirl</code> and just use <code>create :foo</code></li>\n<li>No explicit <code>self</code></li>\n<li>No explicit <code>return</code> at the end of a method</li>\n</ul>\n<p>I was looking at the first half of <a href=\"https://github.com/bbatsov/ruby-style-guide\">https://github.com/bbatsov/ruby-style-guide</a></p>", "body_text": "I always thought that rubocop rules aren't very inviting for people new to the Ruby programming language. I may be wrong on this one, but I would still like to keep the linting rules to a minimum.\nThings that come to mind (opinionated):\n\nIndentation rules: 2 whitespaces, no extra indentation for private methods\nNew hash syntax ({ foo: :bar } instead of { :foo => :bar })\nAligning case and when on the same level\nLines not longer than ~100 characters\nNo trailing whitespace\nFirst-level describe should be RSpec.describe\nNo parentheses for method definitions without args, mandatory parentheses for method definitions with args\nOmit parenthesis on method calls without arguments\nOmit FactoryGirl and just use create :foo\nNo explicit self\nNo explicit return at the end of a method\n\nI was looking at the first half of https://github.com/bbatsov/ruby-style-guide", "body": "I always thought that rubocop rules aren't very inviting for people new to the Ruby programming language. I may be wrong on this one, but I would still like to keep the linting rules to a minimum.\r\n\r\nThings that come to mind (opinionated):\r\n\r\n* Indentation rules: 2 whitespaces, no extra indentation for private methods\r\n* New hash syntax (`{ foo: :bar }` instead of `{ :foo => :bar }`)\r\n* Aligning `case` and `when` on the same level\r\n* Lines not longer than ~100 characters\r\n* No trailing whitespace\r\n* First-level `describe` should be `RSpec.describe`\r\n* No parentheses for method definitions _without_ args, mandatory parentheses for method definitions _with_ args\r\n* Omit parenthesis on method calls without arguments\r\n* Omit `FactoryGirl` and just use `create :foo`\r\n* No explicit `self`\r\n* No explicit `return` at the end of a method\r\n\r\nI was looking at the first half of https://github.com/bbatsov/ruby-style-guide"}