{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/138880919", "pull_request_review_id": 62729887, "id": 138880919, "diff_hunk": "@@ -0,0 +1,17 @@\n+class CommunityUsers\n+\n+  def initialize(params, users)\n+    @params = params", "path": "app/controllers/concerns/community_users.rb", "position": null, "original_position": 4, "commit_id": "7ab5660dee1a41c4bd1a198dfa36f77cee647fe8", "original_commit_id": "94226cf523b0212463a5c07921d5413f51bb8f14", "user": {"login": "carpodaster", "id": 164400, "avatar_url": "https://avatars2.githubusercontent.com/u/164400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carpodaster", "html_url": "https://github.com/carpodaster", "followers_url": "https://api.github.com/users/carpodaster/followers", "following_url": "https://api.github.com/users/carpodaster/following{/other_user}", "gists_url": "https://api.github.com/users/carpodaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/carpodaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carpodaster/subscriptions", "organizations_url": "https://api.github.com/users/carpodaster/orgs", "repos_url": "https://api.github.com/users/carpodaster/repos", "events_url": "https://api.github.com/users/carpodaster/events{/privacy}", "received_events_url": "https://api.github.com/users/carpodaster/received_events", "type": "User", "site_admin": false}, "body": "Furthermore, how about not giving the instance's internals access to the params hash directly, but instead proxy it through (private) helper methods?\r\n\r\nExample:\r\n\r\n```ruby\r\ndef initialize(params, users)\r\n  @users    = users\r\n  @role     = params[:role].presence\r\n  @interest = params[:interest].presence\r\n  # \u2026 and so on: one ivar for every key used in `params`\r\nend\r\n\r\n# \u2026\r\n\r\nprivate\r\n\r\nattr_reader :role, :interest # \u2026and so on\r\n\r\n```\r\nThe ivar assignment is very repetitive and can also be done through a small meta-programming loop, but if you're not comfortable doing MP (which is perfectly fine!), listing the keys/ivars individually will do just fine.", "created_at": "2017-09-14T12:41:14Z", "updated_at": "2017-12-02T17:39:26Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/849#discussion_r138880919", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/849", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/138880919"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/849#discussion_r138880919"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/849"}}, "body_html": "<p>Furthermore, how about not giving the instance's internals access to the params hash directly, but instead proxy it through (private) helper methods?</p>\n<p>Example:</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">initialize</span>(<span class=\"pl-smi\">params</span>, <span class=\"pl-smi\">users</span>)\n  <span class=\"pl-smi\">@users</span>    <span class=\"pl-k\">=</span> users\n  <span class=\"pl-smi\">@role</span>     <span class=\"pl-k\">=</span> params[<span class=\"pl-c1\">:role</span>].presence\n  <span class=\"pl-smi\">@interest</span> <span class=\"pl-k\">=</span> params[<span class=\"pl-c1\">:interest</span>].presence\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> \u2026 and so on: one ivar for every key used in `params`</span>\n<span class=\"pl-k\">end</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> \u2026</span>\n\n<span class=\"pl-k\">private</span>\n\n<span class=\"pl-k\">attr_reader</span> <span class=\"pl-c1\">:role</span>, <span class=\"pl-c1\">:interest</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> \u2026and so on</span>\n</pre></div>\n<p>The ivar assignment is very repetitive and can also be done through a small meta-programming loop, but if you're not comfortable doing MP (which is perfectly fine!), listing the keys/ivars individually will do just fine.</p>", "body_text": "Furthermore, how about not giving the instance's internals access to the params hash directly, but instead proxy it through (private) helper methods?\nExample:\ndef initialize(params, users)\n  @users    = users\n  @role     = params[:role].presence\n  @interest = params[:interest].presence\n  # \u2026 and so on: one ivar for every key used in `params`\nend\n\n# \u2026\n\nprivate\n\nattr_reader :role, :interest # \u2026and so on\n\nThe ivar assignment is very repetitive and can also be done through a small meta-programming loop, but if you're not comfortable doing MP (which is perfectly fine!), listing the keys/ivars individually will do just fine.", "in_reply_to_id": 138879678}