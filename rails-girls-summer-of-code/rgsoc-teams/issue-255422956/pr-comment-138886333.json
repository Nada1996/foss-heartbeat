{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/138886333", "pull_request_review_id": 62729887, "id": 138886333, "diff_hunk": "@@ -0,0 +1,6 @@\n+# frozen_string_literal: true\n+class User::AvailabilitySwitcher\n+  def self.reset", "path": "app/models/user/availability_switcher.rb", "position": null, "original_position": 3, "commit_id": "7ab5660dee1a41c4bd1a198dfa36f77cee647fe8", "original_commit_id": "94226cf523b0212463a5c07921d5413f51bb8f14", "user": {"login": "carpodaster", "id": 164400, "avatar_url": "https://avatars2.githubusercontent.com/u/164400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carpodaster", "html_url": "https://github.com/carpodaster", "followers_url": "https://api.github.com/users/carpodaster/followers", "following_url": "https://api.github.com/users/carpodaster/following{/other_user}", "gists_url": "https://api.github.com/users/carpodaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/carpodaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carpodaster/subscriptions", "organizations_url": "https://api.github.com/users/carpodaster/orgs", "repos_url": "https://api.github.com/users/carpodaster/repos", "events_url": "https://api.github.com/users/carpodaster/events{/privacy}", "received_events_url": "https://api.github.com/users/carpodaster/received_events", "type": "User", "site_admin": false}, "body": "Two thoughts on this class: \r\n\r\n1. I suggest naming a method like this with a bang (`!`) at the end: `reset!` It's a Ruby convention to name \"dangerous\" method like that (oftentimes methods have a non-bang and a bang version; a \"less-dangerous\" non-bang version doesn't really apply here but have a look at the stdlib `String` documentation for a couple of good examples on that).\r\n2. Since the name of the class ends in _Switcher_, it is suggested that there is a reverse action (that is: switching back and forth between two states). The sole action in this class only sets all values to `false`, though. It may sound like nit-picking, but naming is very important (if not amongst the most important things): I suggest naming  this class `User::ResetsAvailability` or something along the lines of the. In order to not re-iterate the name of the class in the one public API method (which would look like `User::ResetsAvailability.reset!`) I suggest the common interface for lamba-/proc style callables: `.call` (this time without a bang \u2013 confusing, I know :wink:)", "created_at": "2017-09-14T13:02:10Z", "updated_at": "2017-12-02T17:39:26Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/849#discussion_r138886333", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/849", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/138886333"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/849#discussion_r138886333"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/849"}}, "body_html": "<p>Two thoughts on this class:</p>\n<ol>\n<li>I suggest naming a method like this with a bang (<code>!</code>) at the end: <code>reset!</code> It's a Ruby convention to name \"dangerous\" method like that (oftentimes methods have a non-bang and a bang version; a \"less-dangerous\" non-bang version doesn't really apply here but have a look at the stdlib <code>String</code> documentation for a couple of good examples on that).</li>\n<li>Since the name of the class ends in <em>Switcher</em>, it is suggested that there is a reverse action (that is: switching back and forth between two states). The sole action in this class only sets all values to <code>false</code>, though. It may sound like nit-picking, but naming is very important (if not amongst the most important things): I suggest naming  this class <code>User::ResetsAvailability</code> or something along the lines of the. In order to not re-iterate the name of the class in the one public API method (which would look like <code>User::ResetsAvailability.reset!</code>) I suggest the common interface for lamba-/proc style callables: <code>.call</code> (this time without a bang \u2013 confusing, I know <g-emoji class=\"g-emoji\" alias=\"wink\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f609.png\">\ud83d\ude09</g-emoji>)</li>\n</ol>", "body_text": "Two thoughts on this class:\n\nI suggest naming a method like this with a bang (!) at the end: reset! It's a Ruby convention to name \"dangerous\" method like that (oftentimes methods have a non-bang and a bang version; a \"less-dangerous\" non-bang version doesn't really apply here but have a look at the stdlib String documentation for a couple of good examples on that).\nSince the name of the class ends in Switcher, it is suggested that there is a reverse action (that is: switching back and forth between two states). The sole action in this class only sets all values to false, though. It may sound like nit-picking, but naming is very important (if not amongst the most important things): I suggest naming  this class User::ResetsAvailability or something along the lines of the. In order to not re-iterate the name of the class in the one public API method (which would look like User::ResetsAvailability.reset!) I suggest the common interface for lamba-/proc style callables: .call (this time without a bang \u2013 confusing, I know \ud83d\ude09)"}