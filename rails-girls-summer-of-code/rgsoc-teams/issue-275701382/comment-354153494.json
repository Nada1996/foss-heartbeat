{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/comments/354153494", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/issues/878#issuecomment-354153494", "issue_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/878", "id": 354153494, "user": {"login": "nileshgulia1", "id": 22280901, "avatar_url": "https://avatars0.githubusercontent.com/u/22280901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nileshgulia1", "html_url": "https://github.com/nileshgulia1", "followers_url": "https://api.github.com/users/nileshgulia1/followers", "following_url": "https://api.github.com/users/nileshgulia1/following{/other_user}", "gists_url": "https://api.github.com/users/nileshgulia1/gists{/gist_id}", "starred_url": "https://api.github.com/users/nileshgulia1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nileshgulia1/subscriptions", "organizations_url": "https://api.github.com/users/nileshgulia1/orgs", "repos_url": "https://api.github.com/users/nileshgulia1/repos", "events_url": "https://api.github.com/users/nileshgulia1/events{/privacy}", "received_events_url": "https://api.github.com/users/nileshgulia1/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-27T18:14:37Z", "updated_at": "2017-12-27T18:14:37Z", "author_association": "NONE", "body_html": "<p>hey <a href=\"https://github.com/f3pix\" class=\"user-mention\">@F3PiX</a> ,need help translating error messages via  i18n.<br>\nFor translating error messages in <code>app/models/applicaton_draft</code></p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">different_projects_required</span>\n    <span class=\"pl-k\">if</span> project1 <span class=\"pl-k\">&amp;&amp;</span> project1 <span class=\"pl-k\">==</span> project2\n      errors.add(<span class=\"pl-c1\">:projects</span>, <span class=\"pl-c1\">:must_not_be_selected_twice</span>)\n    <span class=\"pl-k\">end</span>\n  <span class=\"pl-k\">end</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">accepted_projects_required</span>\n    <span class=\"pl-k\">if</span> projects.any? { |<span class=\"pl-c1\">p</span>| <span class=\"pl-c1\">p</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span><span class=\"pl-c1\">p</span>.accepted? } <span class=\"pl-c\"><span class=\"pl-c\">#</span> if they don't exist, the presence validation will handle it</span>\n      errors.add(<span class=\"pl-c1\">:projects</span>, <span class=\"pl-c1\">:must_have_been_accepted</span>)\n    <span class=\"pl-k\">end</span>\n  <span class=\"pl-k\">end</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">only_one_application_draft_allowed</span>\n    <span class=\"pl-k\">unless</span> team.application_drafts.where(<span class=\"pl-c1\">season:</span> season).none?\n      errors.add(<span class=\"pl-c1\">:base</span>, <span class=\"pl-c1\">:Only_one_application_may_be_lodged</span>)\n    <span class=\"pl-k\">end</span>\n  <span class=\"pl-k\">end</span></pre></div>\n<blockquote>\n<p>def different_projects_required<br>\nif project1 &amp;&amp; project1 == project2<br>\nerrors.add(:projects, :must_not_be_selected_twice)<br>\nend<br>\nend</p>\n</blockquote>\n<div class=\"highlight highlight-source-js\"><pre> errors<span class=\"pl-k\">:</span>\n        models<span class=\"pl-k\">:</span>\n          application_draft<span class=\"pl-k\">:</span>\n                  attributes<span class=\"pl-k\">:</span>\n                      projects<span class=\"pl-k\">:</span>\n                          must_not_be_selected_twice<span class=\"pl-k\">:</span> must not be selected twice</pre></div>\n<p>is this the right approach?</p>", "body_text": "hey @F3PiX ,need help translating error messages via  i18n.\nFor translating error messages in app/models/applicaton_draft\ndef different_projects_required\n    if project1 && project1 == project2\n      errors.add(:projects, :must_not_be_selected_twice)\n    end\n  end\n\n  def accepted_projects_required\n    if projects.any? { |p| p && !p.accepted? } # if they don't exist, the presence validation will handle it\n      errors.add(:projects, :must_have_been_accepted)\n    end\n  end\n\n  def only_one_application_draft_allowed\n    unless team.application_drafts.where(season: season).none?\n      errors.add(:base, :Only_one_application_may_be_lodged)\n    end\n  end\n\ndef different_projects_required\nif project1 && project1 == project2\nerrors.add(:projects, :must_not_be_selected_twice)\nend\nend\n\n errors:\n        models:\n          application_draft:\n                  attributes:\n                      projects:\n                          must_not_be_selected_twice: must not be selected twice\nis this the right approach?", "body": "hey @F3PiX ,need help translating error messages via  i18n.\r\nFor translating error messages in ```app/models/applicaton_draft```\r\n``` ruby\r\ndef different_projects_required\r\n    if project1 && project1 == project2\r\n      errors.add(:projects, :must_not_be_selected_twice)\r\n    end\r\n  end\r\n\r\n  def accepted_projects_required\r\n    if projects.any? { |p| p && !p.accepted? } # if they don't exist, the presence validation will handle it\r\n      errors.add(:projects, :must_have_been_accepted)\r\n    end\r\n  end\r\n\r\n  def only_one_application_draft_allowed\r\n    unless team.application_drafts.where(season: season).none?\r\n      errors.add(:base, :Only_one_application_may_be_lodged)\r\n    end\r\n  end\r\n```\r\n\r\n> def different_projects_required\r\n    if project1 && project1 == project2\r\n      errors.add(:projects, :must_not_be_selected_twice)\r\n    end\r\n  end\r\n\r\n\r\n```javascript \r\n errors:\r\n        models:\r\n          application_draft:\r\n                  attributes:\r\n                      projects:\r\n                          must_not_be_selected_twice: must not be selected twice\r\n```\r\nis this the right approach?\r\n"}