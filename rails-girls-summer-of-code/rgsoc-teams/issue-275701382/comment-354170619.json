{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/comments/354170619", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/issues/878#issuecomment-354170619", "issue_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/878", "id": 354170619, "user": {"login": "F3PiX", "id": 6314687, "avatar_url": "https://avatars1.githubusercontent.com/u/6314687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F3PiX", "html_url": "https://github.com/F3PiX", "followers_url": "https://api.github.com/users/F3PiX/followers", "following_url": "https://api.github.com/users/F3PiX/following{/other_user}", "gists_url": "https://api.github.com/users/F3PiX/gists{/gist_id}", "starred_url": "https://api.github.com/users/F3PiX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F3PiX/subscriptions", "organizations_url": "https://api.github.com/users/F3PiX/orgs", "repos_url": "https://api.github.com/users/F3PiX/repos", "events_url": "https://api.github.com/users/F3PiX/events{/privacy}", "received_events_url": "https://api.github.com/users/F3PiX/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-27T20:07:25Z", "updated_at": "2017-12-27T20:07:25Z", "author_association": "MEMBER", "body_html": "<p>This is a great start, yes!</p>\n<ol>\n<li>\n<p>The general idea is correct: the original string value becomes the value for the error key. ('must not be selected twice'). I assume the last code block you showed ^ is in the en.yml file. Right? It should be.</p>\n</li>\n<li>\n<p>It is not required per se that the whole sentence becomes the key; main goal is that it is very clear (for your fellow developers) what error message is generated. That is partly a matter of opinion, but generally they can be more concise than the message for the user. I myself like it when the describe the error. For instance, 'must not be selected twice' can be called 'multiple_selection_error'</p>\n</li>\n<li>\n<p>I did not yet check the exact place in the en.yml file. One way to check that yourself is update the test files (with these new error keys') and then run the tests. If you happen to add a error to the wrong place, the tests will fail. (For example, for the Application Draft: some are going to :base, others to :projects.) The tests will tell you!</p>\n</li>\n<li>\n<p>Minor detail: be sure to use lowercase only for the keys. (not <code>:Only_one_application...</code> , in the third method in your question ^)</p>\n</li>\n</ol>\n<p>Okay?</p>", "body_text": "This is a great start, yes!\n\n\nThe general idea is correct: the original string value becomes the value for the error key. ('must not be selected twice'). I assume the last code block you showed ^ is in the en.yml file. Right? It should be.\n\n\nIt is not required per se that the whole sentence becomes the key; main goal is that it is very clear (for your fellow developers) what error message is generated. That is partly a matter of opinion, but generally they can be more concise than the message for the user. I myself like it when the describe the error. For instance, 'must not be selected twice' can be called 'multiple_selection_error'\n\n\nI did not yet check the exact place in the en.yml file. One way to check that yourself is update the test files (with these new error keys') and then run the tests. If you happen to add a error to the wrong place, the tests will fail. (For example, for the Application Draft: some are going to :base, others to :projects.) The tests will tell you!\n\n\nMinor detail: be sure to use lowercase only for the keys. (not :Only_one_application... , in the third method in your question ^)\n\n\nOkay?", "body": "This is a great start, yes! \r\n1) The general idea is correct: the original string value becomes the value for the error key. ('must not be selected twice'). I assume the last code block you showed ^ is in the en.yml file. Right? It should be.\r\n\r\n2) It is not required per se that the whole sentence becomes the key; main goal is that it is very clear (for your fellow developers) what error message is generated. That is partly a matter of opinion, but generally they can be more concise than the message for the user. I myself like it when the describe the error. For instance, 'must not be selected twice' can be called 'multiple_selection_error'   \r\n\r\n3) I did not yet check the exact place in the en.yml file. One way to check that yourself is update the test files (with these new error keys') and then run the tests. If you happen to add a error to the wrong place, the tests will fail. (For example, for the Application Draft: some are going to :base, others to :projects.) The tests will tell you!\r\n\r\n4) Minor detail: be sure to use lowercase only for the keys. (not `:Only_one_application... ` , in the third method in your question ^)   \r\n\r\nOkay? \r\n"}