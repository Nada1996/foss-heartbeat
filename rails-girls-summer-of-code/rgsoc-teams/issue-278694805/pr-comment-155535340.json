{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/155535340", "pull_request_review_id": 80710697, "id": 155535340, "diff_hunk": "@@ -0,0 +1,34 @@\n+module StudentFields", "path": "app/models/student_fields.rb", "position": null, "original_position": 1, "commit_id": "61a3376ade49e440f3668f7f5a86fe53bb41b11f", "original_commit_id": "86e1de98d3e7dc85d67f6dab3b62a0347fecd224", "user": {"login": "carpodaster", "id": 164400, "avatar_url": "https://avatars2.githubusercontent.com/u/164400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carpodaster", "html_url": "https://github.com/carpodaster", "followers_url": "https://api.github.com/users/carpodaster/followers", "following_url": "https://api.github.com/users/carpodaster/following{/other_user}", "gists_url": "https://api.github.com/users/carpodaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/carpodaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carpodaster/subscriptions", "organizations_url": "https://api.github.com/users/carpodaster/orgs", "repos_url": "https://api.github.com/users/carpodaster/repos", "events_url": "https://api.github.com/users/carpodaster/events{/privacy}", "received_events_url": "https://api.github.com/users/carpodaster/received_events", "type": "User", "site_admin": false}, "body": "On one hand, I agree that this module shouldn't reside in app/models. Otoh, why do we care? There is no real definition what should go into models. Only persistence objects? We would have to through out quite a few files then. And were to put them? Coming up with new subfolders under `app/` makes it more difficult to find the implementation of a class than browsing a densely  packed app/models folder.\r\n\r\nThe current implementation of `StudentFields` does look as if it belonged into `app/concerns`.\r\n\r\nThat being said, I'm not so much a fan of models (concerns) as a bandaid to remove the line count of a fat model when they're only used in a single class. If anything, it makes it only less explicit what a model is capable of.\r\n\r\nIf we don't want to expose constants to the form, can we transform these to module functions? Or, better yet (and certainly not in this PR), add them as methods to a custom form builder for the the students fields form?", "created_at": "2017-12-07T14:29:21Z", "updated_at": "2017-12-07T19:39:27Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/879#discussion_r155535340", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/879", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/155535340"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/879#discussion_r155535340"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/879"}}, "body_html": "<p>On one hand, I agree that this module shouldn't reside in app/models. Otoh, why do we care? There is no real definition what should go into models. Only persistence objects? We would have to through out quite a few files then. And were to put them? Coming up with new subfolders under <code>app/</code> makes it more difficult to find the implementation of a class than browsing a densely  packed app/models folder.</p>\n<p>The current implementation of <code>StudentFields</code> does look as if it belonged into <code>app/concerns</code>.</p>\n<p>That being said, I'm not so much a fan of models (concerns) as a bandaid to remove the line count of a fat model when they're only used in a single class. If anything, it makes it only less explicit what a model is capable of.</p>\n<p>If we don't want to expose constants to the form, can we transform these to module functions? Or, better yet (and certainly not in this PR), add them as methods to a custom form builder for the the students fields form?</p>", "body_text": "On one hand, I agree that this module shouldn't reside in app/models. Otoh, why do we care? There is no real definition what should go into models. Only persistence objects? We would have to through out quite a few files then. And were to put them? Coming up with new subfolders under app/ makes it more difficult to find the implementation of a class than browsing a densely  packed app/models folder.\nThe current implementation of StudentFields does look as if it belonged into app/concerns.\nThat being said, I'm not so much a fan of models (concerns) as a bandaid to remove the line count of a fat model when they're only used in a single class. If anything, it makes it only less explicit what a model is capable of.\nIf we don't want to expose constants to the form, can we transform these to module functions? Or, better yet (and certainly not in this PR), add them as methods to a custom form builder for the the students fields form?", "in_reply_to_id": 155529822}