{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/comments/350232627", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/888#issuecomment-350232627", "issue_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/888", "id": 350232627, "user": {"login": "carpodaster", "id": 164400, "avatar_url": "https://avatars2.githubusercontent.com/u/164400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carpodaster", "html_url": "https://github.com/carpodaster", "followers_url": "https://api.github.com/users/carpodaster/followers", "following_url": "https://api.github.com/users/carpodaster/following{/other_user}", "gists_url": "https://api.github.com/users/carpodaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/carpodaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carpodaster/subscriptions", "organizations_url": "https://api.github.com/users/carpodaster/orgs", "repos_url": "https://api.github.com/users/carpodaster/repos", "events_url": "https://api.github.com/users/carpodaster/events{/privacy}", "received_events_url": "https://api.github.com/users/carpodaster/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-08T10:43:57Z", "updated_at": "2017-12-08T10:52:21Z", "author_association": "OWNER", "body_html": "<p>Good call! I just checked and they all seem legit. The magic comment only freezes literal strings \u2013 (<code>\"example\"</code>, <code>'example'</code>, <code>%q[Another example]</code> and elements in <code>%w(this example array)</code> but not the array itself). Other datastructures (hashes, array) should still be frozen manually.</p>\n<pre><code>$ git grep \"\\.freeze\"\napp/models/application_draft.rb:  ].freeze\napp/models/application_draft.rb:  ].freeze\napp/models/application_draft.rb:  ].freeze\napp/models/application_draft.rb:    ].freeze\napp/models/application_draft.rb:    ].freeze\napp/models/application_draft.rb:    ].freeze\napp/models/rating/table.rb:                    less_than_40_hours_a_week).freeze\napp/models/season/phase_switcher.rb:  ).freeze\nspec/models/creates_application_from_draft_spec.rb:            expect(subject.team_snapshot[members.to_s.freeze]).to be_present\nspec/models/creates_application_from_draft_spec.rb:            expect(subject.team_snapshot[members.to_s.freeze]).to eql expected\nspec/models/mentor/application_spec.rb:      before { Timecop.freeze(now) }\n</code></pre>", "body_text": "Good call! I just checked and they all seem legit. The magic comment only freezes literal strings \u2013 (\"example\", 'example', %q[Another example] and elements in %w(this example array) but not the array itself). Other datastructures (hashes, array) should still be frozen manually.\n$ git grep \"\\.freeze\"\napp/models/application_draft.rb:  ].freeze\napp/models/application_draft.rb:  ].freeze\napp/models/application_draft.rb:  ].freeze\napp/models/application_draft.rb:    ].freeze\napp/models/application_draft.rb:    ].freeze\napp/models/application_draft.rb:    ].freeze\napp/models/rating/table.rb:                    less_than_40_hours_a_week).freeze\napp/models/season/phase_switcher.rb:  ).freeze\nspec/models/creates_application_from_draft_spec.rb:            expect(subject.team_snapshot[members.to_s.freeze]).to be_present\nspec/models/creates_application_from_draft_spec.rb:            expect(subject.team_snapshot[members.to_s.freeze]).to eql expected\nspec/models/mentor/application_spec.rb:      before { Timecop.freeze(now) }", "body": "Good call! I just checked and they all seem legit. The magic comment only freezes literal strings \u2013 (`\"example\"`, `'example'`, `%q[Another example]` and elements in `%w(this example array)` but not the array itself). Other datastructures (hashes, array) should still be frozen manually.\r\n\r\n```\r\n$ git grep \"\\.freeze\"\r\napp/models/application_draft.rb:  ].freeze\r\napp/models/application_draft.rb:  ].freeze\r\napp/models/application_draft.rb:  ].freeze\r\napp/models/application_draft.rb:    ].freeze\r\napp/models/application_draft.rb:    ].freeze\r\napp/models/application_draft.rb:    ].freeze\r\napp/models/rating/table.rb:                    less_than_40_hours_a_week).freeze\r\napp/models/season/phase_switcher.rb:  ).freeze\r\nspec/models/creates_application_from_draft_spec.rb:            expect(subject.team_snapshot[members.to_s.freeze]).to be_present\r\nspec/models/creates_application_from_draft_spec.rb:            expect(subject.team_snapshot[members.to_s.freeze]).to eql expected\r\nspec/models/mentor/application_spec.rb:      before { Timecop.freeze(now) }\r\n```\r\n\r\n"}