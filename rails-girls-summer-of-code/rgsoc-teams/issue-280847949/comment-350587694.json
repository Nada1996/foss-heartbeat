{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/comments/350587694", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/893#issuecomment-350587694", "issue_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/893", "id": 350587694, "user": {"login": "F3PiX", "id": 6314687, "avatar_url": "https://avatars1.githubusercontent.com/u/6314687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F3PiX", "html_url": "https://github.com/F3PiX", "followers_url": "https://api.github.com/users/F3PiX/followers", "following_url": "https://api.github.com/users/F3PiX/following{/other_user}", "gists_url": "https://api.github.com/users/F3PiX/gists{/gist_id}", "starred_url": "https://api.github.com/users/F3PiX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F3PiX/subscriptions", "organizations_url": "https://api.github.com/users/F3PiX/orgs", "repos_url": "https://api.github.com/users/F3PiX/repos", "events_url": "https://api.github.com/users/F3PiX/events{/privacy}", "received_events_url": "https://api.github.com/users/F3PiX/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-10T22:41:56Z", "updated_at": "2017-12-10T22:41:56Z", "author_association": "MEMBER", "body_html": "<p>Wow!! <g-emoji class=\"g-emoji\" alias=\"1st_place_medal\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f947.png\">\ud83e\udd47</g-emoji><br>\nThis <em>must</em> have been hard, because the result looks deceptively simple. :code_perfume:<br>\nI love the new controller namespaces, also the <code>DevUtils</code> module.</p>\n<p>The only two <em>names</em> I am not so sure about: <code>Selection</code> and <code>Services</code>. After reading your explanation, I see why you use the name <code>Services</code>, so if you don't have reservations on this one, I am fine. (Does the 'classic' service object have a controller, though?).<br>\nAbout <code>Selection</code>: we have two types of selection: the projects and the teams. The formerly-known-as-ratings were only about the team selection process, right? How about naming it <code>TeamSelection</code>?</p>\n<p>And the new routing file <g-emoji class=\"g-emoji\" alias=\"heart_eyes\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f60d.png\">\ud83d\ude0d</g-emoji></p>", "body_text": "Wow!! \ud83e\udd47\nThis must have been hard, because the result looks deceptively simple. :code_perfume:\nI love the new controller namespaces, also the DevUtils module.\nThe only two names I am not so sure about: Selection and Services. After reading your explanation, I see why you use the name Services, so if you don't have reservations on this one, I am fine. (Does the 'classic' service object have a controller, though?).\nAbout Selection: we have two types of selection: the projects and the teams. The formerly-known-as-ratings were only about the team selection process, right? How about naming it TeamSelection?\nAnd the new routing file \ud83d\ude0d", "body": "Wow!! \ud83e\udd47 \r\nThis _must_ have been hard, because the result looks deceptively simple. :code_perfume:\r\nI love the new controller namespaces, also the `DevUtils` module.\r\n\r\nThe only two _names_ I am not so sure about: `Selection` and `Services`. After reading your explanation, I see why you use the name `Services`, so if you don't have reservations on this one, I am fine. (Does the 'classic' service object have a controller, though?).\r\nAbout `Selection`: we have two types of selection: the projects and the teams. The formerly-known-as-ratings were only about the team selection process, right? How about naming it `TeamSelection`?\r\n\r\nAnd the new routing file \ud83d\ude0d   "}