{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/comments/350716001", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/893#issuecomment-350716001", "issue_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/893", "id": 350716001, "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-11T12:53:02Z", "updated_at": "2017-12-11T12:53:02Z", "author_association": "MEMBER", "body_html": "<p>Valid point about <code>Selection</code> <a href=\"https://github.com/f3pix\" class=\"user-mention\">@F3PiX</a> - thought about this as well... renaming to <code>TeamSelection</code> could be an option <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>\n<p>For <code>Services</code>: that's not a module <g-emoji class=\"g-emoji\" alias=\"wink\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f609.png\">\ud83d\ude09</g-emoji><br>\nIt's simply a new directory under <code>app/services</code> that hold callable objects that encapsulate certain business logic - some people also call them *\"service objects\".</p>\n<p>Services aren't <em>models</em>  or <em>resources</em> in general and also don't have a corresponding controller. They just contain a piece of business logic to make these bits of code easier to test, share etc. and better describe the domain.<br>\nBeing callable objects, you'd instantiate them with all the basic information they need to do their operation and then just \"call\" them via their only public method: <code>call</code> <g-emoji class=\"g-emoji\" alias=\"v\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/270c.png\">\u270c\ufe0f</g-emoji></p>\n<p>I usually implement them like this:</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Service</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">initialize</span>(<span class=\"pl-smi\">user</span>)\n    <span class=\"pl-smi\">@user</span> <span class=\"pl-k\">=</span> user\n  <span class=\"pl-k\">end</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">call</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> have fun</span>\n  <span class=\"pl-k\">end</span>\n\n  <span class=\"pl-k\">private</span>\n\n  <span class=\"pl-k\">attr_reader</span> <span class=\"pl-c1\">:user</span>\n<span class=\"pl-k\">end</span></pre></div>\n<p>And then e.g. cal them like this:</p>\n<div class=\"highlight highlight-source-ruby\"><pre>statistics <span class=\"pl-k\">=</span> <span class=\"pl-c1\">StatisticsComputer</span>.<span class=\"pl-k\">new</span>(<span class=\"pl-c1\">user:</span> user).call</pre></div>\n<p>The conference importer that I moved over is implemented <em>slightly</em> different but still looks and behaves very much like a service to me - that's why I went that way.</p>", "body_text": "Valid point about Selection @F3PiX - thought about this as well... renaming to TeamSelection could be an option \ud83d\udc4d\nFor Services: that's not a module \ud83d\ude09\nIt's simply a new directory under app/services that hold callable objects that encapsulate certain business logic - some people also call them *\"service objects\".\nServices aren't models  or resources in general and also don't have a corresponding controller. They just contain a piece of business logic to make these bits of code easier to test, share etc. and better describe the domain.\nBeing callable objects, you'd instantiate them with all the basic information they need to do their operation and then just \"call\" them via their only public method: call \u270c\ufe0f\nI usually implement them like this:\nclass Service\n  def initialize(user)\n    @user = user\n  end\n\n  def call\n    # have fun\n  end\n\n  private\n\n  attr_reader :user\nend\nAnd then e.g. cal them like this:\nstatistics = StatisticsComputer.new(user: user).call\nThe conference importer that I moved over is implemented slightly different but still looks and behaves very much like a service to me - that's why I went that way.", "body": "Valid point about `Selection` @F3PiX - thought about this as well... renaming to `TeamSelection` could be an option \ud83d\udc4d \r\n\r\nFor `Services`: that's not a module \ud83d\ude09 \r\nIt's simply a new directory under `app/services` that hold callable objects that encapsulate certain business logic - some people also call them *\"service objects\".\r\n\r\nServices aren't *models*  or *resources* in general and also don't have a corresponding controller. They just contain a piece of business logic to make these bits of code easier to test, share etc. and better describe the domain.\r\nBeing callable objects, you'd instantiate them with all the basic information they need to do their operation and then just \"call\" them via their only public method: `call` \u270c\ufe0f \r\n\r\nI usually implement them like this:\r\n```ruby\r\nclass Service\r\n  def initialize(user)\r\n    @user = user\r\n  end\r\n\r\n  def call\r\n    # have fun\r\n  end\r\n\r\n  private\r\n\r\n  attr_reader :user\r\nend\r\n```\r\n\r\nAnd then e.g. cal them like this:\r\n```ruby\r\nstatistics = StatisticsComputer.new(user: user).call\r\n```\r\n\r\nThe conference importer that I moved over is implemented *slightly* different but still looks and behaves very much like a service to me - that's why I went that way."}