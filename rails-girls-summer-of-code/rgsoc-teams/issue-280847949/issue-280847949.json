{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/893", "repository_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams", "labels_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/893/labels{/name}", "comments_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/893/comments", "events_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/893/events", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/893", "id": 280847949, "number": 893, "title": "Cleanup nested modules and namespaces", "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-12-10T21:41:43Z", "updated_at": "2017-12-31T08:24:35Z", "closed_at": "2017-12-27T16:44:36Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/893", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/893", "diff_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/893.diff", "patch_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/893.patch"}, "body_html": "<p>Warning upfront: this touches a lot of files <g-emoji class=\"g-emoji\" alias=\"warning\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26a0.png\">\u26a0\ufe0f</g-emoji></p>\n<p>I made this as a <em>small</em>  Sunday project to prepare for updating the layout for orga-users. Turned out it was way harder then expected, since it involved one of the hardest things in CS: <strong>naming things</strong> <g-emoji class=\"g-emoji\" alias=\"see_no_evil\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f648.png\">\ud83d\ude48</g-emoji></p>\n<p><strong>The motivation / idea</strong><br>\nGet rid of the \"shorthand\" syntax for modules in preference of real, actual modules:</p>\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> from this</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo::Bar</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> to this</span>\n<span class=\"pl-k\">module</span> <span class=\"pl-en\">Foo</span>\n  <span class=\"pl-k\">class</span> <span class=\"pl-en\">Bar</span></pre></div>\n<p>This also means: it is barely possible (or at least super dangerous) to have a class with the same name as a module on the same \"level\". So having a model <code>Mentor</code> and define a <code>Mentor::OtherThing</code> is no longer possible. Therefore I had to rename some things.</p>\n<p><strong>The solution<g-emoji class=\"g-emoji\" alias=\"tm\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/2122.png\">\u2122\ufe0f</g-emoji></strong><br>\nI could not - and also did not really want to - use the same module for both, nesting models and namespacing controllers, because in my opinion and especially in the Teams App this stands for 2 different things:</p>\n<ol>\n<li>nesting models: grouping things by domain</li>\n<li>namespacing controllers: grouping things by user-role / access-level</li>\n</ol>\n<p>Therefore I went with domain-fitting (happy on suggestions there still...) names for model namespaces and used the plural role for controller namespaces since this also matches the general naming of routes and controllers and won't collide with our model modules <em>(we're not going to use plural names for model modules if they aren't encapsulating collections)</em></p>\n<p>Once I did <g-emoji class=\"g-emoji\" alias=\"point_up\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/261d.png\">\u261d\ufe0f</g-emoji> for one role I though it looks weird if I would not align all the roles <g-emoji class=\"g-emoji\" alias=\"see_no_evil\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f648.png\">\ud83d\ude48</g-emoji> . I first thought about keeping \"orga\" as \"orga\". Then I tried to add the \"orga\" role to my user with <code>name: 'orga'</code> and realized it would probably be better to also align this <g-emoji class=\"g-emoji\" alias=\"joy_cat\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f639.png\">\ud83d\ude39</g-emoji></p>\n<p><strong>TL;DR</strong><br>\nGrouping some models by domain and namespacing respective controllers with the plural name of the role which is allowed in.<br>\nI know these are a lot of in theory unnecessary changes, but I think it makes the controller schema quickly to understand when e.g. starting from the routes and gives us sort of \"futureproof\" foundation for now.</p>", "body_text": "Warning upfront: this touches a lot of files \u26a0\ufe0f\nI made this as a small  Sunday project to prepare for updating the layout for orga-users. Turned out it was way harder then expected, since it involved one of the hardest things in CS: naming things \ud83d\ude48\nThe motivation / idea\nGet rid of the \"shorthand\" syntax for modules in preference of real, actual modules:\n# from this\nclass Foo::Bar\n\n# to this\nmodule Foo\n  class Bar\nThis also means: it is barely possible (or at least super dangerous) to have a class with the same name as a module on the same \"level\". So having a model Mentor and define a Mentor::OtherThing is no longer possible. Therefore I had to rename some things.\nThe solution\u2122\ufe0f\nI could not - and also did not really want to - use the same module for both, nesting models and namespacing controllers, because in my opinion and especially in the Teams App this stands for 2 different things:\n\nnesting models: grouping things by domain\nnamespacing controllers: grouping things by user-role / access-level\n\nTherefore I went with domain-fitting (happy on suggestions there still...) names for model namespaces and used the plural role for controller namespaces since this also matches the general naming of routes and controllers and won't collide with our model modules (we're not going to use plural names for model modules if they aren't encapsulating collections)\nOnce I did \u261d\ufe0f for one role I though it looks weird if I would not align all the roles \ud83d\ude48 . I first thought about keeping \"orga\" as \"orga\". Then I tried to add the \"orga\" role to my user with name: 'orga' and realized it would probably be better to also align this \ud83d\ude39\nTL;DR\nGrouping some models by domain and namespacing respective controllers with the plural name of the role which is allowed in.\nI know these are a lot of in theory unnecessary changes, but I think it makes the controller schema quickly to understand when e.g. starting from the routes and gives us sort of \"futureproof\" foundation for now.", "body": "Warning upfront: this touches a lot of files \u26a0\ufe0f \r\n\r\nI made this as a *small*  Sunday project to prepare for updating the layout for orga-users. Turned out it was way harder then expected, since it involved one of the hardest things in CS: **naming things** \ud83d\ude48 \r\n\r\n**The motivation / idea**\r\nGet rid of the \"shorthand\" syntax for modules in preference of real, actual modules:\r\n```ruby\r\n# from this\r\nclass Foo::Bar\r\n\r\n# to this\r\nmodule Foo\r\n  class Bar\r\n```\r\n\r\nThis also means: it is barely possible (or at least super dangerous) to have a class with the same name as a module on the same \"level\". So having a model `Mentor` and define a `Mentor::OtherThing` is no longer possible. Therefore I had to rename some things.\r\n\r\n**The solution\u2122\ufe0f**\r\nI could not - and also did not really want to - use the same module for both, nesting models and namespacing controllers, because in my opinion and especially in the Teams App this stands for 2 different things:\r\n1. nesting models: grouping things by domain\r\n1. namespacing controllers: grouping things by user-role / access-level\r\n\r\nTherefore I went with domain-fitting (happy on suggestions there still...) names for model namespaces and used the plural role for controller namespaces since this also matches the general naming of routes and controllers and won't collide with our model modules _(we're not going to use plural names for model modules if they aren't encapsulating collections)_\r\n\r\nOnce I did \u261d\ufe0f for one role I though it looks weird if I would not align all the roles \ud83d\ude48 . I first thought about keeping \"orga\" as \"orga\". Then I tried to add the \"orga\" role to my user with `name: 'orga'` and realized it would probably be better to also align this \ud83d\ude39 \r\n\r\n**TL;DR**\r\nGrouping some models by domain and namespacing respective controllers with the plural name of the role which is allowed in.\r\nI know these are a lot of in theory unnecessary changes, but I think it makes the controller schema quickly to understand when e.g. starting from the routes and gives us sort of \"futureproof\" foundation for now."}