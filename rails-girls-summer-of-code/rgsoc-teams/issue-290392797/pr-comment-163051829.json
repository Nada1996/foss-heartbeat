{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/163051829", "pull_request_review_id": 90604831, "id": 163051829, "diff_hunk": "@@ -147,6 +147,80 @@\n     end\n   end\n \n+  describe 'limit of coaches' do\n+    let(:team) { create :team }\n+    let(:new_user) { create :user }\n+    let(:coach_attributes) { [{ name: 'coach', team_id: team.id, user_id: new_user.id }] + 3.times.map { { name: 'coach', team_id: team.id, user_id: create(:user).id } } }\n+    let(:new_coach_as_student) { { name: 'student', team_id: team.id, user_id: new_user.id } }\n+    let(:fifth_new_coach) { { name: 'coach', team_id: team.id, user_id: create(:user).id } }\n+    let(:remove_coach) { { name: 'coach', team_id: team.id, user_id: create(:user).id, _destroy: true } }\n+\n+    context 'when team has no coaches yet' do\n+      it 'allows to add 2 new coaches' do\n+        expect {\n+          team.update roles_attributes: coach_attributes\n+        }.to change { team.members.count }.by 4\n+      end\n+\n+      it 'ignores coaches marked for destruction' do\n+        roles_attributes = coach_attributes\n+        roles_attributes << remove_coach\n+        expect {\n+          team.update roles_attributes: roles_attributes\n+        }.to change { team.members.count }.by 4\n+      end\n+\n+      it 'does not allow to add more than 5 new coaches' do\n+        roles_attributes = coach_attributes\n+        roles_attributes << fifth_new_coach\n+        team.attributes = { roles_attributes: roles_attributes }\n+        expect { team.save }.not_to change { team.members.count }\n+        expect(team.errors[:roles].first).to eql 'there cannot be more than 4 coaches on a team.'\n+      end\n+\n+      it 'does not allow the same coach to fill up both spots' do\n+        roles_attributes = 2.times.map { coach_attributes.first }\n+        team.attributes = { roles_attributes: roles_attributes }\n+        expect { team.save }.not_to change { team.members.count }\n+        expect(team.errors[:base].first).to eql \"#{new_user.name} can't have more than one role in this team!\"\n+      end\n+\n+      it 'does not allow the same coach to add themselves as a student' do\n+        roles_attributes = [coach_attributes.first, new_coach_as_student]\n+        team.attributes = { roles_attributes: roles_attributes }\n+        expect { team.save }.not_to change { team.members.count }\n+        expect(team.errors[:base].first).to eql \"#{new_user.name} can't have more than one role in this team!\"\n+      end\n+    end\n+    context 'when team has coaches' do\n+      let!(:existing_coaches) { 4.times.map { create :coach_role, team: team, user: create(:user) } }", "path": "spec/models/team_spec.rb", "position": null, "original_position": 50, "commit_id": "1d92cb3cb1538663d2f763f8f55523e82637603d", "original_commit_id": "47b13f5576526bc64511e5c9a203f8fc18aef157", "user": {"login": "carpodaster", "id": 164400, "avatar_url": "https://avatars2.githubusercontent.com/u/164400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carpodaster", "html_url": "https://github.com/carpodaster", "followers_url": "https://api.github.com/users/carpodaster/followers", "following_url": "https://api.github.com/users/carpodaster/following{/other_user}", "gists_url": "https://api.github.com/users/carpodaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/carpodaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carpodaster/subscriptions", "organizations_url": "https://api.github.com/users/carpodaster/orgs", "repos_url": "https://api.github.com/users/carpodaster/repos", "events_url": "https://api.github.com/users/carpodaster/events{/privacy}", "received_events_url": "https://api.github.com/users/carpodaster/received_events", "type": "User", "site_admin": false}, "body": "The `4.times.map` works, of course, but it looks a bit hacky to me. What about \r\n\r\n```ruby\r\nlet!(:existing_coaches) { create_list :coach_role, 4, team: team }  # `user` is implied in the factory\r\n```", "created_at": "2018-01-22T19:58:47Z", "updated_at": "2018-01-25T09:17:00Z", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/913#discussion_r163051829", "pull_request_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/913", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/comments/163051829"}, "html": {"href": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/913#discussion_r163051829"}, "pull_request": {"href": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/pulls/913"}}, "body_html": "<p>The <code>4.times.map</code> works, of course, but it looks a bit hacky to me. What about</p>\n<div class=\"highlight highlight-source-ruby\"><pre>let!(<span class=\"pl-c1\">:existing_coaches</span>) { create_list <span class=\"pl-c1\">:coach_role</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">team:</span> team }  <span class=\"pl-c\"><span class=\"pl-c\">#</span> `user` is implied in the factory</span></pre></div>", "body_text": "The 4.times.map works, of course, but it looks a bit hacky to me. What about\nlet!(:existing_coaches) { create_list :coach_role, 4, team: team }  # `user` is implied in the factory"}