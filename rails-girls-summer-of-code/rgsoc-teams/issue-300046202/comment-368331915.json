{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/comments/368331915", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/946#issuecomment-368331915", "issue_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/946", "id": 368331915, "user": {"login": "klappradla", "id": 3491815, "avatar_url": "https://avatars3.githubusercontent.com/u/3491815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klappradla", "html_url": "https://github.com/klappradla", "followers_url": "https://api.github.com/users/klappradla/followers", "following_url": "https://api.github.com/users/klappradla/following{/other_user}", "gists_url": "https://api.github.com/users/klappradla/gists{/gist_id}", "starred_url": "https://api.github.com/users/klappradla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klappradla/subscriptions", "organizations_url": "https://api.github.com/users/klappradla/orgs", "repos_url": "https://api.github.com/users/klappradla/repos", "events_url": "https://api.github.com/users/klappradla/events{/privacy}", "received_events_url": "https://api.github.com/users/klappradla/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-25T18:25:36Z", "updated_at": "2018-02-25T18:25:36Z", "author_association": "MEMBER", "body_html": "<p>Ok, I updated the migration to use <code>execute</code> directly on the DB.</p>\n<p>For your concern about past data <a href=\"https://github.com/ramonh\" class=\"user-mention\">@ramonh</a>: I was also asking myself this... <g-emoji class=\"g-emoji\" alias=\"thinking\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f914.png\">\ud83e\udd14</g-emoji></p>\n<p>My conclusion was: doing statistics about past seasons vs. having a working Teams app are two different pairs of shoes. The app being a \"app\", the datamodel is of course constantly changing from season to season. By implementing / offering pages like the <code>teams</code> where users would be able to browse teams from previous seasons, I feel like we bought in to also caring about past seasons' data needing to be usable with the current version of the app, rather then sleeping in some corner of the database forever <g-emoji class=\"g-emoji\" alias=\"coffin\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26b0.png\">\u26b0\ufe0f</g-emoji></p>\n<p>Similar to removing deprecated columns, in my opinion, for the sake of maintainability anything that is old and no longer used should be removed from the app. Therefore, I went in favor of losing these bits of information. Afaik (correcty me if I'm wrong <a href=\"https://github.com/alicetragedy\" class=\"user-mention\">@alicetragedy</a> ) we have DB dumps from each season that can be used for doing \"statistics\" on, which in my opinion is also better scalable then trying to keep the db schema backwards compatible forever.</p>", "body_text": "Ok, I updated the migration to use execute directly on the DB.\nFor your concern about past data @ramonh: I was also asking myself this... \ud83e\udd14\nMy conclusion was: doing statistics about past seasons vs. having a working Teams app are two different pairs of shoes. The app being a \"app\", the datamodel is of course constantly changing from season to season. By implementing / offering pages like the teams where users would be able to browse teams from previous seasons, I feel like we bought in to also caring about past seasons' data needing to be usable with the current version of the app, rather then sleeping in some corner of the database forever \u26b0\ufe0f\nSimilar to removing deprecated columns, in my opinion, for the sake of maintainability anything that is old and no longer used should be removed from the app. Therefore, I went in favor of losing these bits of information. Afaik (correcty me if I'm wrong @alicetragedy ) we have DB dumps from each season that can be used for doing \"statistics\" on, which in my opinion is also better scalable then trying to keep the db schema backwards compatible forever.", "body": "Ok, I updated the migration to use `execute` directly on the DB.\r\n\r\nFor your concern about past data @ramonh: I was also asking myself this... \ud83e\udd14 \r\n\r\nMy conclusion was: doing statistics about past seasons vs. having a working Teams app are two different pairs of shoes. The app being a \"app\", the datamodel is of course constantly changing from season to season. By implementing / offering pages like the `teams` where users would be able to browse teams from previous seasons, I feel like we bought in to also caring about past seasons' data needing to be usable with the current version of the app, rather then sleeping in some corner of the database forever \u26b0\ufe0f \r\n\r\nSimilar to removing deprecated columns, in my opinion, for the sake of maintainability anything that is old and no longer used should be removed from the app. Therefore, I went in favor of losing these bits of information. Afaik (correcty me if I'm wrong @alicetragedy ) we have DB dumps from each season that can be used for doing \"statistics\" on, which in my opinion is also better scalable then trying to keep the db schema backwards compatible forever."}