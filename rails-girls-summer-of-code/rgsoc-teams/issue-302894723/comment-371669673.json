{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/comments/371669673", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/961#issuecomment-371669673", "issue_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/961", "id": 371669673, "user": {"login": "F3PiX", "id": 6314687, "avatar_url": "https://avatars1.githubusercontent.com/u/6314687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F3PiX", "html_url": "https://github.com/F3PiX", "followers_url": "https://api.github.com/users/F3PiX/followers", "following_url": "https://api.github.com/users/F3PiX/following{/other_user}", "gists_url": "https://api.github.com/users/F3PiX/gists{/gist_id}", "starred_url": "https://api.github.com/users/F3PiX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F3PiX/subscriptions", "organizations_url": "https://api.github.com/users/F3PiX/orgs", "repos_url": "https://api.github.com/users/F3PiX/repos", "events_url": "https://api.github.com/users/F3PiX/events{/privacy}", "received_events_url": "https://api.github.com/users/F3PiX/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-09T00:13:39Z", "updated_at": "2018-03-09T00:13:39Z", "author_association": "MEMBER", "body_html": "<p>The difference, as I understand it, is that 'feature tests' come from Capybara itself, and <code>system tests</code> are feature tests integrated in the Rails system. (IIRC systems tests work with AR, and that would be the reason why the database cleaner is not needed for system tests.)</p>\n<p>I checked my setup (in a new Rails 5.1 app out of the box).<br>\nThe gems that came with it are capybara and selenium-webdriver. (And  RSpec 3.7.0+, which introduced the system specs. We have that in the Teams app too. )<br>\n<a href=\"http://rspec.info/blog/2017/10/rspec-3-7-has-been-released/\" rel=\"nofollow\">http://rspec.info/blog/2017/10/rspec-3-7-has-been-released/</a></p>\n<p>This is the only config I needed for RSpec in <code>rails_helper.rb</code></p>\n<pre><code>+  # Using system tests in Rspec\n+  config.before(:each, type: :system) do\n+    driven_by :rack_test\n+  end\n+\n+  config.before(:each, type: :system, js: true) do\n+    driven_by :selenium_chrome_headless\n+  end\n</code></pre>\n<p>Additionally, we'll need a <code>/system</code> dir in <code>/rspec</code></p>\n<p>And yes,  just replace type :feature with :system in the specs. The system specs accept both the <code>scenario</code> syntax and the <code>context/it</code>. I think I even mix them.</p>\n<p>The selenium_chrome_headless driver probably requires Chromium; I am not sure if <code>brew chromedriver</code> resolves that.  (My guess would be: not).<br>\nThe :rack_test is the default test driver, and said to be fast. You just don't see the browser open itself and walk through the pages.</p>\n<p>As we don't rely on JS that much, installation may be much easier when we skip the JS tests for now, so we don't need <code>selenium_chrome_headless</code>, and give us some slack to get used to system tests.</p>\n<p>But but but what about the screenshots? Well, you can put <code>take_screenshot</code> within a test. And even better, it always creates a screenshot when tests are failing. <g-emoji class=\"g-emoji\" alias=\"heart_eyes\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f60d.png\">\ud83d\ude0d</g-emoji></p>\n<p>Note: I didn't use JS system tests yet, but mainly because I accidentally decided to use React <g-emoji class=\"g-emoji\" alias=\"see_no_evil\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f648.png\">\ud83d\ude48</g-emoji>  and  I am pretty sure that doesn't work with system tests.</p>\n<p>Food for thought.</p>", "body_text": "The difference, as I understand it, is that 'feature tests' come from Capybara itself, and system tests are feature tests integrated in the Rails system. (IIRC systems tests work with AR, and that would be the reason why the database cleaner is not needed for system tests.)\nI checked my setup (in a new Rails 5.1 app out of the box).\nThe gems that came with it are capybara and selenium-webdriver. (And  RSpec 3.7.0+, which introduced the system specs. We have that in the Teams app too. )\nhttp://rspec.info/blog/2017/10/rspec-3-7-has-been-released/\nThis is the only config I needed for RSpec in rails_helper.rb\n+  # Using system tests in Rspec\n+  config.before(:each, type: :system) do\n+    driven_by :rack_test\n+  end\n+\n+  config.before(:each, type: :system, js: true) do\n+    driven_by :selenium_chrome_headless\n+  end\n\nAdditionally, we'll need a /system dir in /rspec\nAnd yes,  just replace type :feature with :system in the specs. The system specs accept both the scenario syntax and the context/it. I think I even mix them.\nThe selenium_chrome_headless driver probably requires Chromium; I am not sure if brew chromedriver resolves that.  (My guess would be: not).\nThe :rack_test is the default test driver, and said to be fast. You just don't see the browser open itself and walk through the pages.\nAs we don't rely on JS that much, installation may be much easier when we skip the JS tests for now, so we don't need selenium_chrome_headless, and give us some slack to get used to system tests.\nBut but but what about the screenshots? Well, you can put take_screenshot within a test. And even better, it always creates a screenshot when tests are failing. \ud83d\ude0d\nNote: I didn't use JS system tests yet, but mainly because I accidentally decided to use React \ud83d\ude48  and  I am pretty sure that doesn't work with system tests.\nFood for thought.", "body": "The difference, as I understand it, is that 'feature tests' come from Capybara itself, and `system tests` are feature tests integrated in the Rails system. (IIRC systems tests work with AR, and that would be the reason why the database cleaner is not needed for system tests.) \r\n\r\nI checked my setup (in a new Rails 5.1 app out of the box).\r\nThe gems that came with it are capybara and selenium-webdriver. (And  RSpec 3.7.0+, which introduced the system specs. We have that in the Teams app too. )\r\nhttp://rspec.info/blog/2017/10/rspec-3-7-has-been-released/\r\n\r\nThis is the only config I needed for RSpec in `rails_helper.rb` \r\n```\r\n+  # Using system tests in Rspec\r\n+  config.before(:each, type: :system) do\r\n+    driven_by :rack_test\r\n+  end\r\n+\r\n+  config.before(:each, type: :system, js: true) do\r\n+    driven_by :selenium_chrome_headless\r\n+  end\r\n ```\r\nAdditionally, we'll need a `/system` dir in `/rspec`\r\n\r\nAnd yes,  just replace type :feature with :system in the specs. The system specs accept both the `scenario` syntax and the `context/it`. I think I even mix them. \r\n\r\nThe selenium_chrome_headless driver probably requires Chromium; I am not sure if `brew chromedriver` resolves that.  (My guess would be: not).\r\nThe :rack_test is the default test driver, and said to be fast. You just don't see the browser open itself and walk through the pages. \r\n\r\nAs we don't rely on JS that much, installation may be much easier when we skip the JS tests for now, so we don't need `selenium_chrome_headless`, and give us some slack to get used to system tests. \r\n\r\nBut but but what about the screenshots? Well, you can put `take_screenshot` within a test. And even better, it always creates a screenshot when tests are failing. \ud83d\ude0d     \r\n\r\nNote: I didn't use JS system tests yet, but mainly because I accidentally decided to use React \ud83d\ude48  and  I am pretty sure that doesn't work with system tests.\r\n\r\nFood for thought. "}