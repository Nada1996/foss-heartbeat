{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/comments/78022447", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/159#issuecomment-78022447", "issue_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/159", "id": 78022447, "user": {"login": "carpodaster", "id": 164400, "avatar_url": "https://avatars2.githubusercontent.com/u/164400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carpodaster", "html_url": "https://github.com/carpodaster", "followers_url": "https://api.github.com/users/carpodaster/followers", "following_url": "https://api.github.com/users/carpodaster/following{/other_user}", "gists_url": "https://api.github.com/users/carpodaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/carpodaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carpodaster/subscriptions", "organizations_url": "https://api.github.com/users/carpodaster/orgs", "repos_url": "https://api.github.com/users/carpodaster/repos", "events_url": "https://api.github.com/users/carpodaster/events{/privacy}", "received_events_url": "https://api.github.com/users/carpodaster/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-10T09:45:32Z", "updated_at": "2015-03-10T09:45:32Z", "author_association": "OWNER", "body_html": "<p><a href=\"https://github.com/marcgreenstock\" class=\"user-mention\">@marcgreenstock</a>  I could make the tests pass with this when <code>raise_delivery_errors</code> was set back to true:</p>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-md\">--- a/app/mailers/role_mailer.rb</span>\n<span class=\"pl-mi1\">+++ b/app/mailers/role_mailer.rb</span>\n<span class=\"pl-mdr\">@@ -6,2 +6,3 @@</span> class RoleMailer &lt; ActionMailer::Base\n   def user_added_to_team(role)\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    return unless role.user.email.present?</span>\n     @role = role</pre></div>\n<p>It's a bit too defensive for my taste, but technically we can't guarantee that every user has an email address. <code>User#complete_from_github</code> should grab it, but only if they entered a legal GH handle.</p>", "body_text": "@marcgreenstock  I could make the tests pass with this when raise_delivery_errors was set back to true:\n--- a/app/mailers/role_mailer.rb\n+++ b/app/mailers/role_mailer.rb\n@@ -6,2 +6,3 @@ class RoleMailer < ActionMailer::Base\n   def user_added_to_team(role)\n+    return unless role.user.email.present?\n     @role = role\nIt's a bit too defensive for my taste, but technically we can't guarantee that every user has an email address. User#complete_from_github should grab it, but only if they entered a legal GH handle.", "body": "@marcgreenstock  I could make the tests pass with this when `raise_delivery_errors` was set back to true:\n\n``` diff\n--- a/app/mailers/role_mailer.rb\n+++ b/app/mailers/role_mailer.rb\n@@ -6,2 +6,3 @@ class RoleMailer < ActionMailer::Base\n   def user_added_to_team(role)\n+    return unless role.user.email.present?\n     @role = role\n```\n\nIt's a bit too defensive for my taste, but technically we can't guarantee that every user has an email address. `User#complete_from_github` should grab it, but only if they entered a legal GH handle.\n"}