{"url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/comments/93039865", "html_url": "https://github.com/rails-girls-summer-of-code/rgsoc-teams/pull/195#issuecomment-93039865", "issue_url": "https://api.github.com/repos/rails-girls-summer-of-code/rgsoc-teams/issues/195", "id": 93039865, "user": {"login": "cypher", "id": 978, "avatar_url": "https://avatars2.githubusercontent.com/u/978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cypher", "html_url": "https://github.com/cypher", "followers_url": "https://api.github.com/users/cypher/followers", "following_url": "https://api.github.com/users/cypher/following{/other_user}", "gists_url": "https://api.github.com/users/cypher/gists{/gist_id}", "starred_url": "https://api.github.com/users/cypher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cypher/subscriptions", "organizations_url": "https://api.github.com/users/cypher/orgs", "repos_url": "https://api.github.com/users/cypher/repos", "events_url": "https://api.github.com/users/cypher/events{/privacy}", "received_events_url": "https://api.github.com/users/cypher/received_events", "type": "User", "site_admin": false}, "created_at": "2015-04-14T19:51:36Z", "updated_at": "2015-04-14T19:52:25Z", "author_association": "MEMBER", "body_html": "<p><a href=\"https://github.com/marcgreenstock\" class=\"user-mention\">@marcgreenstock</a> I've written a quick patch that should demonstrate how using the state machine for this case would work, but I haven't yet updated the tests.</p>\n<p>(To apply the patch, copy it into a file, then run <code>git apply patchfile</code>, or if you're on OS X, copy it, then run <code>pbpaste | git apply</code>)</p>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-c1\">diff --git i/app/models/application_draft.rb w/app/models/application_draft.rb</span>\nindex c466ac8..cf46c1a 100644\n<span class=\"pl-md\">--- i/app/models/application_draft.rb</span>\n<span class=\"pl-mi1\">+++ w/app/models/application_draft.rb</span>\n<span class=\"pl-mdr\">@@ -85,6 +85,7 @@</span> class ApplicationDraft &lt; ActiveRecord::Base\n   aasm :column =&gt; :state, :no_direct_assignment =&gt; true do\n     state :draft, :initial =&gt; true\n     state :applied\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    state :signed_off</span>\n\n     event :submit_application do\n       after do |applied_at_time = nil|\n<span class=\"pl-mdr\">@@ -94,29 +95,28 @@</span> class ApplicationDraft &lt; ActiveRecord::Base\n\n       transitions :from =&gt; :draft, :to =&gt; :applied, :guard =&gt; :ready?\n     end\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>  end</span>\n\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>  def signed_off?</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    signed_off_by.present? &amp;&amp; signed_off_at.present?</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>  end</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    event :sign_off, :guard =&gt; :can_sign_off? do</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      after do</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        update(</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>          signed_off_by: current_user.id,</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>          signed_off_at: Time.now.utc</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        )</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      end</span>\n\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>  def sign_off!</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    raise CurrentUserNotProvided unless current_user.present?</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    if !as_mentor?</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>      errors.add :base, 'You need to be a mentor of this application to sign it off.'</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>      false</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    elsif signed_off?</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>      errors.add :base, 'Application has already been signed off.'</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>      false</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    else</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>      update(</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>        signed_off_by: current_user.id,</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>        signed_off_at: Time.now.utc</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>      )</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>      true</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      transitions :from =&gt; :applied, :to =&gt; :signed_off</span>\n     end\n   end\n\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  def can_sign_off?</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    raise CurrentUserNotProvided unless current_user.present?</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span></span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    errors.add :base, 'You need to be a mentor of this application to sign it off.' if !as_mentor?</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    errors.add :base, 'Application has already been signed off.' if signed_off?</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span></span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    return errors.present?</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  end</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span></span>\n   private\n\n   def mentor_required\n\n</pre></div>\n<p>(If you get an error about <code>fatal: corrupt patch at line 59</code> or something like it, you've probably missed the newline at the end)</p>", "body_text": "@marcgreenstock I've written a quick patch that should demonstrate how using the state machine for this case would work, but I haven't yet updated the tests.\n(To apply the patch, copy it into a file, then run git apply patchfile, or if you're on OS X, copy it, then run pbpaste | git apply)\ndiff --git i/app/models/application_draft.rb w/app/models/application_draft.rb\nindex c466ac8..cf46c1a 100644\n--- i/app/models/application_draft.rb\n+++ w/app/models/application_draft.rb\n@@ -85,6 +85,7 @@ class ApplicationDraft < ActiveRecord::Base\n   aasm :column => :state, :no_direct_assignment => true do\n     state :draft, :initial => true\n     state :applied\n+    state :signed_off\n\n     event :submit_application do\n       after do |applied_at_time = nil|\n@@ -94,29 +95,28 @@ class ApplicationDraft < ActiveRecord::Base\n\n       transitions :from => :draft, :to => :applied, :guard => :ready?\n     end\n-  end\n\n-  def signed_off?\n-    signed_off_by.present? && signed_off_at.present?\n-  end\n+    event :sign_off, :guard => :can_sign_off? do\n+      after do\n+        update(\n+          signed_off_by: current_user.id,\n+          signed_off_at: Time.now.utc\n+        )\n+      end\n\n-  def sign_off!\n-    raise CurrentUserNotProvided unless current_user.present?\n-    if !as_mentor?\n-      errors.add :base, 'You need to be a mentor of this application to sign it off.'\n-      false\n-    elsif signed_off?\n-      errors.add :base, 'Application has already been signed off.'\n-      false\n-    else\n-      update(\n-        signed_off_by: current_user.id,\n-        signed_off_at: Time.now.utc\n-      )\n-      true\n+      transitions :from => :applied, :to => :signed_off\n     end\n   end\n\n+  def can_sign_off?\n+    raise CurrentUserNotProvided unless current_user.present?\n+\n+    errors.add :base, 'You need to be a mentor of this application to sign it off.' if !as_mentor?\n+    errors.add :base, 'Application has already been signed off.' if signed_off?\n+\n+    return errors.present?\n+  end\n+\n   private\n\n   def mentor_required\n\n\n(If you get an error about fatal: corrupt patch at line 59 or something like it, you've probably missed the newline at the end)", "body": "@marcgreenstock I've written a quick patch that should demonstrate how using the state machine for this case would work, but I haven't yet updated the tests.\n\n(To apply the patch, copy it into a file, then run `git apply patchfile`, or if you're on OS X, copy it, then run `pbpaste | git apply`)\n\n``` patch\ndiff --git i/app/models/application_draft.rb w/app/models/application_draft.rb\nindex c466ac8..cf46c1a 100644\n--- i/app/models/application_draft.rb\n+++ w/app/models/application_draft.rb\n@@ -85,6 +85,7 @@ class ApplicationDraft < ActiveRecord::Base\n   aasm :column => :state, :no_direct_assignment => true do\n     state :draft, :initial => true\n     state :applied\n+    state :signed_off\n\n     event :submit_application do\n       after do |applied_at_time = nil|\n@@ -94,29 +95,28 @@ class ApplicationDraft < ActiveRecord::Base\n\n       transitions :from => :draft, :to => :applied, :guard => :ready?\n     end\n-  end\n\n-  def signed_off?\n-    signed_off_by.present? && signed_off_at.present?\n-  end\n+    event :sign_off, :guard => :can_sign_off? do\n+      after do\n+        update(\n+          signed_off_by: current_user.id,\n+          signed_off_at: Time.now.utc\n+        )\n+      end\n\n-  def sign_off!\n-    raise CurrentUserNotProvided unless current_user.present?\n-    if !as_mentor?\n-      errors.add :base, 'You need to be a mentor of this application to sign it off.'\n-      false\n-    elsif signed_off?\n-      errors.add :base, 'Application has already been signed off.'\n-      false\n-    else\n-      update(\n-        signed_off_by: current_user.id,\n-        signed_off_at: Time.now.utc\n-      )\n-      true\n+      transitions :from => :applied, :to => :signed_off\n     end\n   end\n\n+  def can_sign_off?\n+    raise CurrentUserNotProvided unless current_user.present?\n+\n+    errors.add :base, 'You need to be a mentor of this application to sign it off.' if !as_mentor?\n+    errors.add :base, 'Application has already been signed off.' if signed_off?\n+\n+    return errors.present?\n+  end\n+\n   private\n\n   def mentor_required\n\n\n```\n\n(If you get an error about `fatal: corrupt patch at line 59` or something like it, you've probably missed the newline at the end)\n"}